
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000028de  00002972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800090  00800090  000029a2  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145b  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000980b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 06 	call	0xcee	; 0xcee <main>
      8a:	0c 94 6d 14 	jmp	0x28da	; 0x28da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 14 	jmp	0x286c	; 0x286c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 14 	jmp	0x286c	; 0x286c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *
 * Author: Mahmoud Gamal Mohamed
 */
#include"Buzzer.h"
#include"gpio.h"
void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
//Initializes the buzzer pin direction and turn off the buzzer.
	GPIO_setupPinDirection(PORTC_ID , PIN5_ID , PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_on>:
void Buzzer_on(void){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
//Activates the buzzer.
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_off>:
void Buzzer_off(void){
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	//Deactivates the buzzer.
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_Init>:
#include"gpio.h"
#include"PWM.h"
#include"std_types.h"
#include"common_macros.h"
#include<avr/io.h>
void DcMotor_Init(void){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	63 e0       	ldi	r22, 0x03	; 3
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID ,PIN0_ID,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
	GPIO_writePin(PORTB_ID ,PIN1_ID,LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DcMotor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02

	PWM_Timer0_Start(speed);
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	0e 94 45 06 	call	0xc8a	; 0xc8a <PWM_Timer0_Start>
	 switch(state){
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	3c 83       	std	Y+4, r19	; 0x04
     bec:	2b 83       	std	Y+3, r18	; 0x03
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	91 05       	cpc	r25, r1
     bf6:	31 f0       	breq	.+12     	; 0xc04 <DcMotor_Rotate+0x36>
     bf8:	2b 81       	ldd	r18, Y+3	; 0x03
     bfa:	3c 81       	ldd	r19, Y+4	; 0x04
     bfc:	22 30       	cpi	r18, 0x02	; 2
     bfe:	31 05       	cpc	r19, r1
     c00:	61 f0       	breq	.+24     	; 0xc1a <DcMotor_Rotate+0x4c>
     c02:	16 c0       	rjmp	.+44     	; 0xc30 <DcMotor_Rotate+0x62>
	 case CW:
			GPIO_writePin(PORTB_ID ,PIN0_ID,LOGIC_HIGH);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
			GPIO_writePin(PORTB_ID ,PIN1_ID,LOGIC_LOW);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <DcMotor_Rotate+0x76>
		 break;
	 case A_CW:
			GPIO_writePin(PORTB_ID ,PIN0_ID,LOGIC_LOW);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
			GPIO_writePin(PORTB_ID ,PIN1_ID,LOGIC_HIGH);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <DcMotor_Rotate+0x76>
		 break;
	 default :
			GPIO_writePin(PORTB_ID ,PIN0_ID,LOGIC_LOW);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
			GPIO_writePin(PORTB_ID ,PIN1_ID,LOGIC_LOW);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
	 }


}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <PIR_init>:
 *      Author: Rivo
 */
#include"PIR_Driver.h"
#include"common_macros.h"
#include"gpio.h"
void PIR_init(void){
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	/*▪ Description: Function to initialize the PIR driver
	▪ Inputs: None
	▪ Return: None
	*/
	GPIO_setupPinDirection(PIR_PORT_ID , PIR_PIN_ID , PIN_INPUT);
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_setupPinDirection>
	GPIO_writePin(PIR_PORT_ID,PIR_PIN_ID,LOGIC_HIGH);
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	62 e0       	ldi	r22, 0x02	; 2
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePin>
}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <PIR_getState>:
uint8 PIR_getState(void){
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	/*▪ Description: Function to return PIR State
	  ▪ Inputs: None
      ▪ Return: uint8 */
	return GPIO_readPin(PIR_PORT_ID , PIR_PIN_ID ) ;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <GPIO_readPin>
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <PWM_Timer0_Start>:
 *  Created on: Mar 14, 2025
 *      Author: Dell
 */
#include"PWM.h"
#include<avr/io.h>
void PWM_Timer0_Start(uint8 duty_cycle){
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
     c96:	e2 e5       	ldi	r30, 0x52	; 82
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1

	OCR0  =(uint8) (((uint16) duty_cycle * 255) / 100);
     c9c:	ec e5       	ldi	r30, 0x5C	; 92
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	48 2f       	mov	r20, r24
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	ca 01       	movw	r24, r20
     ca8:	9c 01       	movw	r18, r24
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	c9 01       	movw	r24, r18
     cb0:	96 95       	lsr	r25
     cb2:	98 2f       	mov	r25, r24
     cb4:	88 27       	eor	r24, r24
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	82 1b       	sub	r24, r18
     cbc:	93 0b       	sbc	r25, r19
     cbe:	84 0f       	add	r24, r20
     cc0:	95 1f       	adc	r25, r21
     cc2:	24 e6       	ldi	r18, 0x64	; 100
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	b9 01       	movw	r22, r18
     cc8:	0e 94 00 14 	call	0x2800	; 0x2800 <__udivmodhi4>
     ccc:	cb 01       	movw	r24, r22
     cce:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     cd0:	a7 e3       	ldi	r26, 0x37	; 55
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e3       	ldi	r30, 0x37	; 55
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	88 60       	ori	r24, 0x08	; 8
     cdc:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01)|(1<< CS00)|(1<<CS01);
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8b e6       	ldi	r24, 0x6B	; 107
     ce4:	80 83       	st	Z, r24

}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <main>:
SystemState state = IDLE ;
uint8 WRONG_Attempts=0;
uint8 PIR_wait = 0 ;
uint8 counter_second = 0 ;

int main(){
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	a9 97       	sbiw	r28, 0x29	; 41
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
	init();
     d02:	0e 94 b8 07 	call	0xf70	; 0xf70 <init>
	DDRC |=(1<<3);
     d06:	a4 e3       	ldi	r26, 0x34	; 52
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e4 e3       	ldi	r30, 0x34	; 52
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	8c 93       	st	X, r24
	if(UART_recieveByte() == 0xff){
     d14:	0e 94 85 13 	call	0x270a	; 0x270a <UART_recieveByte>
     d18:	8f 3f       	cpi	r24, 0xFF	; 255
     d1a:	21 f4       	brne	.+8      	; 0xd24 <main+0x36>
		UART_sendByte(0xff);
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <main+0x38>
     d24:	ff cf       	rjmp	.-2      	; 0xd24 <main+0x36>
		while(1);
	}
	uint8 pw1[5],pw2[5],cmd;

	while(1){
		if (state == WAITPIR && PIR_wait && !PIR_getState() ){
     d26:	80 91 90 00 	lds	r24, 0x0090
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	09 f0       	breq	.+2      	; 0xd30 <main+0x42>
     d2e:	b6 c0       	rjmp	.+364    	; 0xe9c <main+0x1ae>
     d30:	80 91 92 00 	lds	r24, 0x0092
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <main+0x4c>
     d38:	b1 c0       	rjmp	.+354    	; 0xe9c <main+0x1ae>
     d3a:	0e 94 3a 06 	call	0xc74	; 0xc74 <PIR_getState>
     d3e:	88 23       	and	r24, r24
     d40:	09 f0       	breq	.+2      	; 0xd44 <main+0x56>
     d42:	ac c0       	rjmp	.+344    	; 0xe9c <main+0x1ae>
			PIR_wait = 0 ;
     d44:	10 92 92 00 	sts	0x0092, r1
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	aa e7       	ldi	r26, 0x7A	; 122
     d4e:	b4 e4       	ldi	r27, 0x44	; 68
     d50:	8b 87       	std	Y+11, r24	; 0x0b
     d52:	9c 87       	std	Y+12, r25	; 0x0c
     d54:	ad 87       	std	Y+13, r26	; 0x0d
     d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <main+0xac>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <main+0x12a>
	else if (__tmp > 65535)
     d9a:	6f 81       	ldd	r22, Y+7	; 0x07
     d9c:	78 85       	ldd	r23, Y+8	; 0x08
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <main+0x10c>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0xfa>
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <main+0xee>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <main+0x136>
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			UART_sendByte(3);
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
			DcMotor_Rotate(A_CW , 100);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	64 e6       	ldi	r22, 0x64	; 100
     e36:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
			state = CLOSEDOOR ;
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	80 93 90 00 	sts	0x0090, r24
			counter_second = 0 ;
     e40:	10 92 93 00 	sts	0x0093, r1
			Timer_ConfigType t1 = {0,TICKS_PER_SECOND,TIMER1,TIMER_PRESCALER_1024,TIMER_MODE_COMPARE};
     e44:	9e 01       	movw	r18, r28
     e46:	26 5e       	subi	r18, 0xE6	; 230
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	3e a3       	std	Y+38, r19	; 0x26
     e4c:	2d a3       	std	Y+37, r18	; 0x25
     e4e:	88 e6       	ldi	r24, 0x68	; 104
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	98 a7       	std	Y+40, r25	; 0x28
     e54:	8f a3       	std	Y+39, r24	; 0x27
     e56:	97 e0       	ldi	r25, 0x07	; 7
     e58:	99 a7       	std	Y+41, r25	; 0x29
     e5a:	ef a1       	ldd	r30, Y+39	; 0x27
     e5c:	f8 a5       	ldd	r31, Y+40	; 0x28
     e5e:	00 80       	ld	r0, Z
     e60:	2f a1       	ldd	r18, Y+39	; 0x27
     e62:	38 a5       	ldd	r19, Y+40	; 0x28
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	3f 4f       	sbci	r19, 0xFF	; 255
     e68:	38 a7       	std	Y+40, r19	; 0x28
     e6a:	2f a3       	std	Y+39, r18	; 0x27
     e6c:	ed a1       	ldd	r30, Y+37	; 0x25
     e6e:	fe a1       	ldd	r31, Y+38	; 0x26
     e70:	00 82       	st	Z, r0
     e72:	2d a1       	ldd	r18, Y+37	; 0x25
     e74:	3e a1       	ldd	r19, Y+38	; 0x26
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	3e a3       	std	Y+38, r19	; 0x26
     e7c:	2d a3       	std	Y+37, r18	; 0x25
     e7e:	39 a5       	ldd	r19, Y+41	; 0x29
     e80:	31 50       	subi	r19, 0x01	; 1
     e82:	39 a7       	std	Y+41, r19	; 0x29
     e84:	89 a5       	ldd	r24, Y+41	; 0x29
     e86:	88 23       	and	r24, r24
     e88:	41 f7       	brne	.-48     	; 0xe5a <main+0x16c>
			Timer_init(&t1);
     e8a:	ce 01       	movw	r24, r28
     e8c:	4a 96       	adiw	r24, 0x1a	; 26
     e8e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Timer_init>
			Timer_setCallBack(timer1_callback , TIMER1);
     e92:	8a e4       	ldi	r24, 0x4A	; 74
     e94:	9a e0       	ldi	r25, 0x0A	; 10
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <Timer_setCallBack>
		}
		if(state == IDLE){
     e9c:	80 91 90 00 	lds	r24, 0x0090
     ea0:	88 23       	and	r24, r24
     ea2:	09 f0       	breq	.+2      	; 0xea6 <main+0x1b8>
     ea4:	40 cf       	rjmp	.-384    	; 0xd26 <main+0x38>
			cmd = UART_recieveByte();
     ea6:	0e 94 85 13 	call	0x270a	; 0x270a <UART_recieveByte>
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
			switch(cmd){
     eac:	8f 85       	ldd	r24, Y+15	; 0x0f
     eae:	e8 2f       	mov	r30, r24
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	fc a3       	std	Y+36, r31	; 0x24
     eb4:	eb a3       	std	Y+35, r30	; 0x23
     eb6:	2b a1       	ldd	r18, Y+35	; 0x23
     eb8:	3c a1       	ldd	r19, Y+36	; 0x24
     eba:	2d 32       	cpi	r18, 0x2D	; 45
     ebc:	31 05       	cpc	r19, r1
     ebe:	71 f1       	breq	.+92     	; 0xf1c <main+0x22e>
     ec0:	8b a1       	ldd	r24, Y+35	; 0x23
     ec2:	9c a1       	ldd	r25, Y+36	; 0x24
     ec4:	80 35       	cpi	r24, 0x50	; 80
     ec6:	91 05       	cpc	r25, r1
     ec8:	31 f0       	breq	.+12     	; 0xed6 <main+0x1e8>
     eca:	eb a1       	ldd	r30, Y+35	; 0x23
     ecc:	fc a1       	ldd	r31, Y+36	; 0x24
     ece:	eb 32       	cpi	r30, 0x2B	; 43
     ed0:	f1 05       	cpc	r31, r1
     ed2:	21 f1       	breq	.+72     	; 0xf1c <main+0x22e>
     ed4:	49 c0       	rjmp	.+146    	; 0xf68 <main+0x27a>
			case 'P':
			receivePass_CTRL_ECU(pw1);
     ed6:	ce 01       	movw	r24, r28
     ed8:	40 96       	adiw	r24, 0x10	; 16
     eda:	0e 94 c7 08 	call	0x118e	; 0x118e <receivePass_CTRL_ECU>
			receivePass_CTRL_ECU(pw2);
     ede:	ce 01       	movw	r24, r28
     ee0:	45 96       	adiw	r24, 0x15	; 21
     ee2:	0e 94 c7 08 	call	0x118e	; 0x118e <receivePass_CTRL_ECU>
			UART_sendByte(compare_pass(pw1,pw2)&&savepassword(pw1));
     ee6:	ce 01       	movw	r24, r28
     ee8:	40 96       	adiw	r24, 0x10	; 16
     eea:	9e 01       	movw	r18, r28
     eec:	2b 5e       	subi	r18, 0xEB	; 235
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	b9 01       	movw	r22, r18
     ef2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <compare_pass>
     ef6:	88 23       	and	r24, r24
     ef8:	59 f0       	breq	.+22     	; 0xf10 <main+0x222>
     efa:	ce 01       	movw	r24, r28
     efc:	40 96       	adiw	r24, 0x10	; 16
     efe:	0e 94 20 08 	call	0x1040	; 0x1040 <savepassword>
     f02:	88 23       	and	r24, r24
     f04:	29 f0       	breq	.+10     	; 0xf10 <main+0x222>
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3a a3       	std	Y+34, r19	; 0x22
     f0c:	29 a3       	std	Y+33, r18	; 0x21
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <main+0x226>
     f10:	1a a2       	std	Y+34, r1	; 0x22
     f12:	19 a2       	std	Y+33, r1	; 0x21
     f14:	89 a1       	ldd	r24, Y+33	; 0x21
     f16:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
     f1a:	05 cf       	rjmp	.-502    	; 0xd26 <main+0x38>
			break ;
			case '+':
			case '-':
				receivePass_CTRL_ECU(pw1);
     f1c:	ce 01       	movw	r24, r28
     f1e:	40 96       	adiw	r24, 0x10	; 16
     f20:	0e 94 c7 08 	call	0x118e	; 0x118e <receivePass_CTRL_ECU>
				if(receivePass_CTRL_ECU(pw1)){
     f24:	ce 01       	movw	r24, r28
     f26:	40 96       	adiw	r24, 0x10	; 16
     f28:	0e 94 c7 08 	call	0x118e	; 0x118e <receivePass_CTRL_ECU>
     f2c:	88 23       	and	r24, r24
     f2e:	61 f0       	breq	.+24     	; 0xf48 <main+0x25a>
					UART_sendByte(1);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
					WRONG_Attempts = 0 ;
     f36:	10 92 91 00 	sts	0x0091, r1
					if(cmd == '+') handleDoor();
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	8b 32       	cpi	r24, 0x2B	; 43
     f3e:	09 f0       	breq	.+2      	; 0xf42 <main+0x254>
     f40:	f2 ce       	rjmp	.-540    	; 0xd26 <main+0x38>
     f42:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <handleDoor>
     f46:	ef ce       	rjmp	.-546    	; 0xd26 <main+0x38>
				}	else{
					UART_sendByte(0);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
					WRONG_Attempts++;
     f4e:	80 91 91 00 	lds	r24, 0x0091
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 91 00 	sts	0x0091, r24
					if(WRONG_Attempts >= 3)handle_Alarm();
     f58:	80 91 91 00 	lds	r24, 0x0091
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <main+0x274>
     f60:	e2 ce       	rjmp	.-572    	; 0xd26 <main+0x38>
     f62:	0e 94 33 0b 	call	0x1666	; 0x1666 <handle_Alarm>
     f66:	df ce       	rjmp	.-578    	; 0xd26 <main+0x38>
				}
				break ;
			default:
				UART_sendByte(0);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
     f6e:	db ce       	rjmp	.-586    	; 0xd26 <main+0x38>

00000f70 <init>:
			}

		}
	}
}
void init(void){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	66 97       	sbiw	r28, 0x16	; 22
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
	SREG   |= (1<<7);
     f84:	af e5       	ldi	r26, 0x5F	; 95
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ef e5       	ldi	r30, 0x5F	; 95
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	8c 93       	st	X, r24
	DcMotor_Init();
     f92:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_Init>
	Buzzer_init();
     f96:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	PIR_init();
     f9a:	0e 94 29 06 	call	0xc52	; 0xc52 <PIR_init>
	TWI_ConfigType twiConfig={0x50,TWI_BIT_RATE_100K};
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	9e 87       	std	Y+14, r25	; 0x0e
     fa4:	8d 87       	std	Y+13, r24	; 0x0d
     fa6:	e6 e7       	ldi	r30, 0x76	; 118
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	f8 8b       	std	Y+16, r31	; 0x10
     fac:	ef 87       	std	Y+15, r30	; 0x0f
     fae:	f5 e0       	ldi	r31, 0x05	; 5
     fb0:	f9 8b       	std	Y+17, r31	; 0x11
     fb2:	ef 85       	ldd	r30, Y+15	; 0x0f
     fb4:	f8 89       	ldd	r31, Y+16	; 0x10
     fb6:	00 80       	ld	r0, Z
     fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fba:	98 89       	ldd	r25, Y+16	; 0x10
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	98 8b       	std	Y+16, r25	; 0x10
     fc0:	8f 87       	std	Y+15, r24	; 0x0f
     fc2:	ed 85       	ldd	r30, Y+13	; 0x0d
     fc4:	fe 85       	ldd	r31, Y+14	; 0x0e
     fc6:	00 82       	st	Z, r0
     fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fca:	9e 85       	ldd	r25, Y+14	; 0x0e
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	9e 87       	std	Y+14, r25	; 0x0e
     fd0:	8d 87       	std	Y+13, r24	; 0x0d
     fd2:	99 89       	ldd	r25, Y+17	; 0x11
     fd4:	91 50       	subi	r25, 0x01	; 1
     fd6:	99 8b       	std	Y+17, r25	; 0x11
     fd8:	e9 89       	ldd	r30, Y+17	; 0x11
     fda:	ee 23       	and	r30, r30
     fdc:	51 f7       	brne	.-44     	; 0xfb2 <init+0x42>
	TWI_init(&twiConfig);
     fde:	ce 01       	movw	r24, r28
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_init>
	UART_ConfigType UART = {Char_Size_8bit , parity_Disable,STOP_1BIT , 9600};
     fe6:	ce 01       	movw	r24, r28
     fe8:	06 96       	adiw	r24, 0x06	; 6
     fea:	9b 8b       	std	Y+19, r25	; 0x13
     fec:	8a 8b       	std	Y+18, r24	; 0x12
     fee:	ef e6       	ldi	r30, 0x6F	; 111
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	fd 8b       	std	Y+21, r31	; 0x15
     ff4:	ec 8b       	std	Y+20, r30	; 0x14
     ff6:	f7 e0       	ldi	r31, 0x07	; 7
     ff8:	fe 8b       	std	Y+22, r31	; 0x16
     ffa:	ec 89       	ldd	r30, Y+20	; 0x14
     ffc:	fd 89       	ldd	r31, Y+21	; 0x15
     ffe:	00 80       	ld	r0, Z
    1000:	8c 89       	ldd	r24, Y+20	; 0x14
    1002:	9d 89       	ldd	r25, Y+21	; 0x15
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	9d 8b       	std	Y+21, r25	; 0x15
    1008:	8c 8b       	std	Y+20, r24	; 0x14
    100a:	ea 89       	ldd	r30, Y+18	; 0x12
    100c:	fb 89       	ldd	r31, Y+19	; 0x13
    100e:	00 82       	st	Z, r0
    1010:	8a 89       	ldd	r24, Y+18	; 0x12
    1012:	9b 89       	ldd	r25, Y+19	; 0x13
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 8b       	std	Y+19, r25	; 0x13
    1018:	8a 8b       	std	Y+18, r24	; 0x12
    101a:	9e 89       	ldd	r25, Y+22	; 0x16
    101c:	91 50       	subi	r25, 0x01	; 1
    101e:	9e 8b       	std	Y+22, r25	; 0x16
    1020:	ee 89       	ldd	r30, Y+22	; 0x16
    1022:	ee 23       	and	r30, r30
    1024:	51 f7       	brne	.-44     	; 0xffa <init+0x8a>
			UART_init(&UART);
    1026:	ce 01       	movw	r24, r28
    1028:	06 96       	adiw	r24, 0x06	; 6
    102a:	0e 94 c4 12 	call	0x2588	; 0x2588 <UART_init>
}
    102e:	66 96       	adiw	r28, 0x16	; 22
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <savepassword>:
uint8 savepassword(uint8 *pw){
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	62 97       	sbiw	r28, 0x12	; 18
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	99 8b       	std	Y+17, r25	; 0x11
    1056:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i = 0 ; i < 5 ; i++){
    1058:	1f 86       	std	Y+15, r1	; 0x0f
    105a:	89 c0       	rjmp	.+274    	; 0x116e <savepassword+0x12e>
		if(EEPROM_writeByte(0x0000+i,pw[i]) != SUCCESS ){
    105c:	8f 85       	ldd	r24, Y+15	; 0x0f
    105e:	48 2f       	mov	r20, r24
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	8f 85       	ldd	r24, Y+15	; 0x0f
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	88 89       	ldd	r24, Y+16	; 0x10
    106a:	99 89       	ldd	r25, Y+17	; 0x11
    106c:	fc 01       	movw	r30, r24
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	20 81       	ld	r18, Z
    1074:	ca 01       	movw	r24, r20
    1076:	62 2f       	mov	r22, r18
    1078:	0e 94 76 0b 	call	0x16ec	; 0x16ec <EEPROM_writeByte>
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	11 f0       	breq	.+4      	; 0x1084 <savepassword+0x44>
			return 0 ;
    1080:	1a 8a       	std	Y+18, r1	; 0x12
    1082:	7b c0       	rjmp	.+246    	; 0x117a <savepassword+0x13a>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e2       	ldi	r26, 0x20	; 32
    108a:	b1 e4       	ldi	r27, 0x41	; 65
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	9c 87       	std	Y+12, r25	; 0x0c
    1090:	ad 87       	std	Y+13, r26	; 0x0d
    1092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	98 87       	std	Y+8, r25	; 0x08
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <savepassword+0x96>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <savepassword+0x114>
	else if (__tmp > 65535)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <savepassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <savepassword+0xf6>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <savepassword+0xe4>
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <savepassword+0xd8>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <savepassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <savepassword+0x120>
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	TWI_init(&twiConfig);
	UART_ConfigType UART = {Char_Size_8bit , parity_Disable,STOP_1BIT , 9600};
			UART_init(&UART);
}
uint8 savepassword(uint8 *pw){
	for(uint8 i = 0 ; i < 5 ; i++){
    1168:	8f 85       	ldd	r24, Y+15	; 0x0f
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	8f 87       	std	Y+15, r24	; 0x0f
    116e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1170:	85 30       	cpi	r24, 0x05	; 5
    1172:	08 f4       	brcc	.+2      	; 0x1176 <savepassword+0x136>
    1174:	73 cf       	rjmp	.-282    	; 0x105c <savepassword+0x1c>
		if(EEPROM_writeByte(0x0000+i,pw[i]) != SUCCESS ){
			return 0 ;
		}
		_delay_ms(10);
	}
	return 1 ;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	8a 8b       	std	Y+18, r24	; 0x12
    117a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    117c:	62 96       	adiw	r28, 0x12	; 18
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <receivePass_CTRL_ECU>:

uint8 receivePass_CTRL_ECU(uint8 *pw){
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	61 97       	sbiw	r28, 0x11	; 17
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	99 8b       	std	Y+17, r25	; 0x11
    11a8:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i =0 ; i < 5 ; i++){
    11aa:	1f 86       	std	Y+15, r1	; 0x0f
    11ac:	81 c0       	rjmp	.+258    	; 0x12b0 <receivePass_CTRL_ECU+0x122>
		pw[i]=UART_recieveByte();
    11ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	88 89       	ldd	r24, Y+16	; 0x10
    11b6:	99 89       	ldd	r25, Y+17	; 0x11
    11b8:	8c 01       	movw	r16, r24
    11ba:	02 0f       	add	r16, r18
    11bc:	13 1f       	adc	r17, r19
    11be:	0e 94 85 13 	call	0x270a	; 0x270a <UART_recieveByte>
    11c2:	f8 01       	movw	r30, r16
    11c4:	80 83       	st	Z, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e2       	ldi	r26, 0x20	; 32
    11cc:	b1 e4       	ldi	r27, 0x41	; 65
    11ce:	8b 87       	std	Y+11, r24	; 0x0b
    11d0:	9c 87       	std	Y+12, r25	; 0x0c
    11d2:	ad 87       	std	Y+13, r26	; 0x0d
    11d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11da:	8d 85       	ldd	r24, Y+13	; 0x0d
    11dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a ef       	ldi	r20, 0xFA	; 250
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8f 83       	std	Y+7, r24	; 0x07
    11f0:	98 87       	std	Y+8, r25	; 0x08
    11f2:	a9 87       	std	Y+9, r26	; 0x09
    11f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f6:	6f 81       	ldd	r22, Y+7	; 0x07
    11f8:	78 85       	ldd	r23, Y+8	; 0x08
    11fa:	89 85       	ldd	r24, Y+9	; 0x09
    11fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <receivePass_CTRL_ECU+0x8a>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <receivePass_CTRL_ECU+0x108>
	else if (__tmp > 65535)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <receivePass_CTRL_ECU+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	6b 85       	ldd	r22, Y+11	; 0x0b
    1232:	7c 85       	ldd	r23, Y+12	; 0x0c
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	9e 85       	ldd	r25, Y+14	; 0x0e
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <receivePass_CTRL_ECU+0xea>
    125a:	88 ec       	ldi	r24, 0xC8	; 200
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <receivePass_CTRL_ECU+0xd8>
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <receivePass_CTRL_ECU+0xcc>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <receivePass_CTRL_ECU+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <receivePass_CTRL_ECU+0x114>
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return 1 ;
}

uint8 receivePass_CTRL_ECU(uint8 *pw){
	for(uint8 i =0 ; i < 5 ; i++){
    12aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	8f 87       	std	Y+15, r24	; 0x0f
    12b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b2:	85 30       	cpi	r24, 0x05	; 5
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <receivePass_CTRL_ECU+0x12a>
    12b6:	7b cf       	rjmp	.-266    	; 0x11ae <receivePass_CTRL_ECU+0x20>
		pw[i]=UART_recieveByte();
		_delay_ms(10);
	}
	return 1 ;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
}
    12ba:	61 96       	adiw	r28, 0x11	; 17
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <compare_pass>:
uint8 compare_pass(uint8 *pw1 , uint8 *pw2){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <compare_pass+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <compare_pass+0x8>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <compare_pass+0xa>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	9b 83       	std	Y+3, r25	; 0x03
    12e0:	8a 83       	std	Y+2, r24	; 0x02
    12e2:	7d 83       	std	Y+5, r23	; 0x05
    12e4:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i = 0 ; i < 5 ; i++){
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	19 c0       	rjmp	.+50     	; 0x131c <compare_pass+0x4c>
		if(pw1[i]!= pw2[i]) return 0 ;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	fc 01       	movw	r30, r24
    12f6:	e2 0f       	add	r30, r18
    12f8:	f3 1f       	adc	r31, r19
    12fa:	40 81       	ld	r20, Z
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	fc 01       	movw	r30, r24
    1308:	e2 0f       	add	r30, r18
    130a:	f3 1f       	adc	r31, r19
    130c:	80 81       	ld	r24, Z
    130e:	48 17       	cp	r20, r24
    1310:	11 f0       	breq	.+4      	; 0x1316 <compare_pass+0x46>
    1312:	1e 82       	std	Y+6, r1	; 0x06
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <compare_pass+0x56>
		_delay_ms(10);
	}
	return 1 ;
}
uint8 compare_pass(uint8 *pw1 , uint8 *pw2){
	for(uint8 i = 0 ; i < 5 ; i++){
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	85 30       	cpi	r24, 0x05	; 5
    1320:	20 f3       	brcs	.-56     	; 0x12ea <compare_pass+0x1a>
		if(pw1[i]!= pw2[i]) return 0 ;
	}
	return 1 ;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	8e 83       	std	Y+6, r24	; 0x06
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1328:	26 96       	adiw	r28, 0x06	; 6
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <verify_password>:
uint8 verify_password(uint8 *pw){
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	67 97       	sbiw	r28, 0x17	; 23
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	9e 8b       	std	Y+22, r25	; 0x16
    1350:	8d 8b       	std	Y+21, r24	; 0x15
	uint8 store[5];
	for(uint8 i = 0 ; i< 5  ; i++){
    1352:	1f 86       	std	Y+15, r1	; 0x0f
    1354:	88 c0       	rjmp	.+272    	; 0x1466 <verify_password+0x12c>
		if(EEPROM_readByte(0x0000+i,&store[i])!= SUCCESS) return 0 ;
    1356:	8f 85       	ldd	r24, Y+15	; 0x0f
    1358:	48 2f       	mov	r20, r24
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e 01       	movw	r18, r28
    1364:	20 5f       	subi	r18, 0xF0	; 240
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	28 0f       	add	r18, r24
    136a:	39 1f       	adc	r19, r25
    136c:	ca 01       	movw	r24, r20
    136e:	b9 01       	movw	r22, r18
    1370:	0e 94 b7 0b 	call	0x176e	; 0x176e <EEPROM_readByte>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	11 f0       	breq	.+4      	; 0x137c <verify_password+0x42>
    1378:	1f 8a       	std	Y+23, r1	; 0x17
    137a:	82 c0       	rjmp	.+260    	; 0x1480 <verify_password+0x146>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e2       	ldi	r26, 0x20	; 32
    1382:	b1 e4       	ldi	r27, 0x41	; 65
    1384:	8b 87       	std	Y+11, r24	; 0x0b
    1386:	9c 87       	std	Y+12, r25	; 0x0c
    1388:	ad 87       	std	Y+13, r26	; 0x0d
    138a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	6b 85       	ldd	r22, Y+11	; 0x0b
    138e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1390:	8d 85       	ldd	r24, Y+13	; 0x0d
    1392:	9e 85       	ldd	r25, Y+14	; 0x0e
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a ef       	ldi	r20, 0xFA	; 250
    139a:	54 e4       	ldi	r21, 0x44	; 68
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8f 83       	std	Y+7, r24	; 0x07
    13a6:	98 87       	std	Y+8, r25	; 0x08
    13a8:	a9 87       	std	Y+9, r26	; 0x09
    13aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ac:	6f 81       	ldd	r22, Y+7	; 0x07
    13ae:	78 85       	ldd	r23, Y+8	; 0x08
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <verify_password+0x94>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	3f c0       	rjmp	.+126    	; 0x144c <verify_password+0x112>
	else if (__tmp > 65535)
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	4c f5       	brge	.+82     	; 0x1438 <verify_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	0f c0       	rjmp	.+30     	; 0x142e <verify_password+0xf4>
    1410:	88 ec       	ldi	r24, 0xC8	; 200
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9c 83       	std	Y+4, r25	; 0x04
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <verify_password+0xe2>
    1420:	9c 83       	std	Y+4, r25	; 0x04
    1422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	69 f7       	brne	.-38     	; 0x1410 <verify_password+0xd6>
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <verify_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <verify_password+0x11e>
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	}
	return 1 ;
}
uint8 verify_password(uint8 *pw){
	uint8 store[5];
	for(uint8 i = 0 ; i< 5  ; i++){
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	8f 87       	std	Y+15, r24	; 0x0f
    1466:	8f 85       	ldd	r24, Y+15	; 0x0f
    1468:	85 30       	cpi	r24, 0x05	; 5
    146a:	08 f4       	brcc	.+2      	; 0x146e <verify_password+0x134>
    146c:	74 cf       	rjmp	.-280    	; 0x1356 <verify_password+0x1c>
		if(EEPROM_readByte(0x0000+i,&store[i])!= SUCCESS) return 0 ;
		_delay_ms(10);
	}
	return compare_pass(pw , store) ;
    146e:	8d 89       	ldd	r24, Y+21	; 0x15
    1470:	9e 89       	ldd	r25, Y+22	; 0x16
    1472:	9e 01       	movw	r18, r28
    1474:	20 5f       	subi	r18, 0xF0	; 240
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	b9 01       	movw	r22, r18
    147a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <compare_pass>
    147e:	8f 8b       	std	Y+23, r24	; 0x17
    1480:	8f 89       	ldd	r24, Y+23	; 0x17
}
    1482:	67 96       	adiw	r28, 0x17	; 23
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <timer1_callback>:
void timer1_callback(void){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	2c 97       	sbiw	r28, 0x0c	; 12
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
	counter_second++;
    14a8:	80 91 93 00 	lds	r24, 0x0093
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	80 93 93 00 	sts	0x0093, r24
	if(state == OPENDOOR &&counter_second >=15 ){
    14b2:	80 91 90 00 	lds	r24, 0x0090
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	09 f0       	breq	.+2      	; 0x14bc <timer1_callback+0x28>
    14ba:	50 c0       	rjmp	.+160    	; 0x155c <timer1_callback+0xc8>
    14bc:	80 91 93 00 	lds	r24, 0x0093
    14c0:	8f 30       	cpi	r24, 0x0F	; 15
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <timer1_callback+0x32>
    14c4:	4b c0       	rjmp	.+150    	; 0x155c <timer1_callback+0xc8>
		Timer_deInit(TIMER1);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	0e 94 87 11 	call	0x230e	; 0x230e <Timer_deInit>
		counter_second = 0 ;
    14cc:	10 92 93 00 	sts	0x0093, r1
		DcMotor_Rotate(STOP,0);
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
		if(PIR_getState()){
    14d8:	0e 94 3a 06 	call	0xc74	; 0xc74 <PIR_getState>
    14dc:	88 23       	and	r24, r24
    14de:	51 f0       	breq	.+20     	; 0x14f4 <timer1_callback+0x60>
			UART_sendByte(2);
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
			state = WAITPIR ;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 93 90 00 	sts	0x0090, r24
			PIR_wait = 1 ;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 92 00 	sts	0x0092, r24
    14f2:	68 c0       	rjmp	.+208    	; 0x15c4 <timer1_callback+0x130>
		}
		else {
			UART_sendByte(3);
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
			DcMotor_Rotate(A_CW , 100);
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	64 e6       	ldi	r22, 0x64	; 100
    14fe:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
			state = CLOSEDOOR ;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	80 93 90 00 	sts	0x0090, r24
			Timer_ConfigType t1 = {0,TICKS_PER_SECOND,TIMER1,TIMER_PRESCALER_1024,TIMER_MODE_COMPARE};
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	99 87       	std	Y+9, r25	; 0x09
    150e:	88 87       	std	Y+8, r24	; 0x08
    1510:	eb e7       	ldi	r30, 0x7B	; 123
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	fb 87       	std	Y+11, r31	; 0x0b
    1516:	ea 87       	std	Y+10, r30	; 0x0a
    1518:	f7 e0       	ldi	r31, 0x07	; 7
    151a:	fc 87       	std	Y+12, r31	; 0x0c
    151c:	ea 85       	ldd	r30, Y+10	; 0x0a
    151e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1520:	00 80       	ld	r0, Z
    1522:	8a 85       	ldd	r24, Y+10	; 0x0a
    1524:	9b 85       	ldd	r25, Y+11	; 0x0b
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	9b 87       	std	Y+11, r25	; 0x0b
    152a:	8a 87       	std	Y+10, r24	; 0x0a
    152c:	e8 85       	ldd	r30, Y+8	; 0x08
    152e:	f9 85       	ldd	r31, Y+9	; 0x09
    1530:	00 82       	st	Z, r0
    1532:	88 85       	ldd	r24, Y+8	; 0x08
    1534:	99 85       	ldd	r25, Y+9	; 0x09
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	99 87       	std	Y+9, r25	; 0x09
    153a:	88 87       	std	Y+8, r24	; 0x08
    153c:	9c 85       	ldd	r25, Y+12	; 0x0c
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	9c 87       	std	Y+12, r25	; 0x0c
    1542:	ec 85       	ldd	r30, Y+12	; 0x0c
    1544:	ee 23       	and	r30, r30
    1546:	51 f7       	brne	.-44     	; 0x151c <timer1_callback+0x88>
			Timer_init(&t1);
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Timer_init>
			Timer_setCallBack(timer1_callback , TIMER1);
    1550:	8a e4       	ldi	r24, 0x4A	; 74
    1552:	9a e0       	ldi	r25, 0x0A	; 10
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <Timer_setCallBack>
    155a:	34 c0       	rjmp	.+104    	; 0x15c4 <timer1_callback+0x130>
		}
	}
	else if(state == CLOSEDOOR && counter_second >=15){
    155c:	80 91 90 00 	lds	r24, 0x0090
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	99 f4       	brne	.+38     	; 0x158a <timer1_callback+0xf6>
    1564:	80 91 93 00 	lds	r24, 0x0093
    1568:	8f 30       	cpi	r24, 0x0F	; 15
    156a:	78 f0       	brcs	.+30     	; 0x158a <timer1_callback+0xf6>
		Timer_deInit(TIMER1);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 87 11 	call	0x230e	; 0x230e <Timer_deInit>
		counter_second = 0 ;
    1572:	10 92 93 00 	sts	0x0093, r1
		DcMotor_Rotate(STOP , 0 );
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
		UART_sendByte(4);
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
		state = IDLE ;
    1584:	10 92 90 00 	sts	0x0090, r1
    1588:	1d c0       	rjmp	.+58     	; 0x15c4 <timer1_callback+0x130>
	}
	else if(state == ALARM && counter_second >= 60){
    158a:	80 91 90 00 	lds	r24, 0x0090
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	c9 f4       	brne	.+50     	; 0x15c4 <timer1_callback+0x130>
    1592:	80 91 93 00 	lds	r24, 0x0093
    1596:	8c 33       	cpi	r24, 0x3C	; 60
    1598:	a8 f0       	brcs	.+42     	; 0x15c4 <timer1_callback+0x130>
		Buzzer_off();
    159a:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_off>
		Timer_deInit(TIMER1);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 87 11 	call	0x230e	; 0x230e <Timer_deInit>
		counter_second = 0 ;
    15a4:	10 92 93 00 	sts	0x0093, r1
		PORTC |= (1 << 3);
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	8c 93       	st	X, r24
		WRONG_Attempts = 0 ;
    15b6:	10 92 91 00 	sts	0x0091, r1
		state = IDLE ;
    15ba:	10 92 90 00 	sts	0x0090, r1
		UART_sendByte(5);
    15be:	85 e0       	ldi	r24, 0x05	; 5
    15c0:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
	}
}
    15c4:	2c 96       	adiw	r28, 0x0c	; 12
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <handleDoor>:

void handleDoor(void){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	2c 97       	sbiw	r28, 0x0c	; 12
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(1);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
	state = OPENDOOR;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 90 00 	sts	0x0090, r24
	counter_second = 0 ;
    15f6:	10 92 93 00 	sts	0x0093, r1
	DcMotor_Rotate(CW , 100);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	64 e6       	ldi	r22, 0x64	; 100
    15fe:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
	Timer_ConfigType t1 = {0,TICKS_PER_SECOND,TIMER1,TIMER_PRESCALER_1024,TIMER_MODE_COMPARE};
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	99 87       	std	Y+9, r25	; 0x09
    1608:	88 87       	std	Y+8, r24	; 0x08
    160a:	e2 e8       	ldi	r30, 0x82	; 130
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	fb 87       	std	Y+11, r31	; 0x0b
    1610:	ea 87       	std	Y+10, r30	; 0x0a
    1612:	f7 e0       	ldi	r31, 0x07	; 7
    1614:	fc 87       	std	Y+12, r31	; 0x0c
    1616:	ea 85       	ldd	r30, Y+10	; 0x0a
    1618:	fb 85       	ldd	r31, Y+11	; 0x0b
    161a:	00 80       	ld	r0, Z
    161c:	8a 85       	ldd	r24, Y+10	; 0x0a
    161e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	9b 87       	std	Y+11, r25	; 0x0b
    1624:	8a 87       	std	Y+10, r24	; 0x0a
    1626:	e8 85       	ldd	r30, Y+8	; 0x08
    1628:	f9 85       	ldd	r31, Y+9	; 0x09
    162a:	00 82       	st	Z, r0
    162c:	88 85       	ldd	r24, Y+8	; 0x08
    162e:	99 85       	ldd	r25, Y+9	; 0x09
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	99 87       	std	Y+9, r25	; 0x09
    1634:	88 87       	std	Y+8, r24	; 0x08
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	9c 87       	std	Y+12, r25	; 0x0c
    163c:	ec 85       	ldd	r30, Y+12	; 0x0c
    163e:	ee 23       	and	r30, r30
    1640:	51 f7       	brne	.-44     	; 0x1616 <handleDoor+0x40>
	Timer_init(&t1);
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Timer_init>
	Timer_setCallBack(timer1_callback , TIMER1);
    164a:	8a e4       	ldi	r24, 0x4A	; 74
    164c:	9a e0       	ldi	r25, 0x0A	; 10
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <Timer_setCallBack>
}
    1654:	2c 96       	adiw	r28, 0x0c	; 12
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <handle_Alarm>:
void handle_Alarm(void){
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	2c 97       	sbiw	r28, 0x0c	; 12
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
	state = ALARM ;
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	80 93 90 00 	sts	0x0090, r24
		counter_second = 0 ;
    1680:	10 92 93 00 	sts	0x0093, r1
		Buzzer_on();
    1684:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_on>
		Timer_ConfigType t1 = {0,TICKS_PER_SECOND,TIMER1,TIMER_PRESCALER_1024,TIMER_MODE_COMPARE};
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	99 87       	std	Y+9, r25	; 0x09
    168e:	88 87       	std	Y+8, r24	; 0x08
    1690:	e9 e8       	ldi	r30, 0x89	; 137
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	fb 87       	std	Y+11, r31	; 0x0b
    1696:	ea 87       	std	Y+10, r30	; 0x0a
    1698:	f7 e0       	ldi	r31, 0x07	; 7
    169a:	fc 87       	std	Y+12, r31	; 0x0c
    169c:	ea 85       	ldd	r30, Y+10	; 0x0a
    169e:	fb 85       	ldd	r31, Y+11	; 0x0b
    16a0:	00 80       	ld	r0, Z
    16a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	9b 87       	std	Y+11, r25	; 0x0b
    16aa:	8a 87       	std	Y+10, r24	; 0x0a
    16ac:	e8 85       	ldd	r30, Y+8	; 0x08
    16ae:	f9 85       	ldd	r31, Y+9	; 0x09
    16b0:	00 82       	st	Z, r0
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	99 85       	ldd	r25, Y+9	; 0x09
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	99 87       	std	Y+9, r25	; 0x09
    16ba:	88 87       	std	Y+8, r24	; 0x08
    16bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    16be:	91 50       	subi	r25, 0x01	; 1
    16c0:	9c 87       	std	Y+12, r25	; 0x0c
    16c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    16c4:	ee 23       	and	r30, r30
    16c6:	51 f7       	brne	.-44     	; 0x169c <handle_Alarm+0x36>
		Timer_init(&t1);
    16c8:	ce 01       	movw	r24, r28
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Timer_init>
		Timer_setCallBack(timer1_callback , TIMER1);
    16d0:	8a e4       	ldi	r24, 0x4A	; 74
    16d2:	9a e0       	ldi	r25, 0x0A	; 10
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <Timer_setCallBack>

}
    16da:	2c 96       	adiw	r28, 0x0c	; 12
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <EEPROM_writeByte+0x6>
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <EEPROM_writeByte+0x8>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16fe:	0e 94 5d 12 	call	0x24ba	; 0x24ba <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1702:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	11 f0       	breq	.+4      	; 0x170e <EEPROM_writeByte+0x22>
        return ERROR;
    170a:	1c 82       	std	Y+4, r1	; 0x04
    170c:	28 c0       	rjmp	.+80     	; 0x175e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	80 70       	andi	r24, 0x00	; 0
    1714:	97 70       	andi	r25, 0x07	; 7
    1716:	88 0f       	add	r24, r24
    1718:	89 2f       	mov	r24, r25
    171a:	88 1f       	adc	r24, r24
    171c:	99 0b       	sbc	r25, r25
    171e:	91 95       	neg	r25
    1720:	80 6a       	ori	r24, 0xA0	; 160
    1722:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1726:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    172a:	88 31       	cpi	r24, 0x18	; 24
    172c:	11 f0       	breq	.+4      	; 0x1732 <EEPROM_writeByte+0x46>
        return ERROR; 
    172e:	1c 82       	std	Y+4, r1	; 0x04
    1730:	16 c0       	rjmp	.+44     	; 0x175e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1738:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    173c:	88 32       	cpi	r24, 0x28	; 40
    173e:	11 f0       	breq	.+4      	; 0x1744 <EEPROM_writeByte+0x58>
        return ERROR;
    1740:	1c 82       	std	Y+4, r1	; 0x04
    1742:	0d c0       	rjmp	.+26     	; 0x175e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    174a:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    174e:	88 32       	cpi	r24, 0x28	; 40
    1750:	11 f0       	breq	.+4      	; 0x1756 <EEPROM_writeByte+0x6a>
        return ERROR;
    1752:	1c 82       	std	Y+4, r1	; 0x04
    1754:	04 c0       	rjmp	.+8      	; 0x175e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1756:	0e 94 6d 12 	call	0x24da	; 0x24da <TWI_stop>
	
    return SUCCESS;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	8c 83       	std	Y+4, r24	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <EEPROM_readByte+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <EEPROM_readByte+0x8>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	7c 83       	std	Y+4, r23	; 0x04
    1782:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1784:	0e 94 5d 12 	call	0x24ba	; 0x24ba <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1788:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	11 f0       	breq	.+4      	; 0x1794 <EEPROM_readByte+0x26>
        return ERROR;
    1790:	1d 82       	std	Y+5, r1	; 0x05
    1792:	44 c0       	rjmp	.+136    	; 0x181c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	80 70       	andi	r24, 0x00	; 0
    179a:	97 70       	andi	r25, 0x07	; 7
    179c:	88 0f       	add	r24, r24
    179e:	89 2f       	mov	r24, r25
    17a0:	88 1f       	adc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	91 95       	neg	r25
    17a6:	80 6a       	ori	r24, 0xA0	; 160
    17a8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17ac:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    17b0:	88 31       	cpi	r24, 0x18	; 24
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <EEPROM_readByte+0x4a>
        return ERROR;
    17b4:	1d 82       	std	Y+5, r1	; 0x05
    17b6:	32 c0       	rjmp	.+100    	; 0x181c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17be:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    17c2:	88 32       	cpi	r24, 0x28	; 40
    17c4:	11 f0       	breq	.+4      	; 0x17ca <EEPROM_readByte+0x5c>
        return ERROR;
    17c6:	1d 82       	std	Y+5, r1	; 0x05
    17c8:	29 c0       	rjmp	.+82     	; 0x181c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    17ca:	0e 94 5d 12 	call	0x24ba	; 0x24ba <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    17ce:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    17d2:	80 31       	cpi	r24, 0x10	; 16
    17d4:	11 f0       	breq	.+4      	; 0x17da <EEPROM_readByte+0x6c>
        return ERROR;
    17d6:	1d 82       	std	Y+5, r1	; 0x05
    17d8:	21 c0       	rjmp	.+66     	; 0x181c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	80 70       	andi	r24, 0x00	; 0
    17e0:	97 70       	andi	r25, 0x07	; 7
    17e2:	88 0f       	add	r24, r24
    17e4:	89 2f       	mov	r24, r25
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 0b       	sbc	r25, r25
    17ea:	91 95       	neg	r25
    17ec:	81 6a       	ori	r24, 0xA1	; 161
    17ee:	0e 94 78 12 	call	0x24f0	; 0x24f0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17f2:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    17f6:	80 34       	cpi	r24, 0x40	; 64
    17f8:	11 f0       	breq	.+4      	; 0x17fe <EEPROM_readByte+0x90>
        return ERROR;
    17fa:	1d 82       	std	Y+5, r1	; 0x05
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17fe:	0e 94 a2 12 	call	0x2544	; 0x2544 <TWI_readByteWithNACK>
    1802:	eb 81       	ldd	r30, Y+3	; 0x03
    1804:	fc 81       	ldd	r31, Y+4	; 0x04
    1806:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1808:	0e 94 b5 12 	call	0x256a	; 0x256a <TWI_getStatus>
    180c:	88 35       	cpi	r24, 0x58	; 88
    180e:	11 f0       	breq	.+4      	; 0x1814 <EEPROM_readByte+0xa6>
        return ERROR;
    1810:	1d 82       	std	Y+5, r1	; 0x05
    1812:	04 c0       	rjmp	.+8      	; 0x181c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1814:	0e 94 6d 12 	call	0x24da	; 0x24da <TWI_stop>

    return SUCCESS;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_setupPinDirection+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <GPIO_setupPinDirection+0x8>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	6a 83       	std	Y+2, r22	; 0x02
    1840:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	08 f0       	brcs	.+2      	; 0x184a <GPIO_setupPinDirection+0x1c>
    1848:	d5 c0       	rjmp	.+426    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	08 f0       	brcs	.+2      	; 0x1852 <GPIO_setupPinDirection+0x24>
    1850:	d1 c0       	rjmp	.+418    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3d 83       	std	Y+5, r19	; 0x05
    185a:	2c 83       	std	Y+4, r18	; 0x04
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <GPIO_setupPinDirection+0x3a>
    1866:	43 c0       	rjmp	.+134    	; 0x18ee <GPIO_setupPinDirection+0xc0>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <GPIO_setupPinDirection+0x4e>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	71 f0       	breq	.+28     	; 0x1896 <GPIO_setupPinDirection+0x68>
    187a:	bc c0       	rjmp	.+376    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <GPIO_setupPinDirection+0x5a>
    1886:	5f c0       	rjmp	.+190    	; 0x1946 <GPIO_setupPinDirection+0x118>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <GPIO_setupPinDirection+0x66>
    1892:	85 c0       	rjmp	.+266    	; 0x199e <GPIO_setupPinDirection+0x170>
    1894:	af c0       	rjmp	.+350    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    189c:	aa e3       	ldi	r26, 0x3A	; 58
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ea e3       	ldi	r30, 0x3A	; 58
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_setupPinDirection+0x8c>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_setupPinDirection+0x88>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	98 c0       	rjmp	.+304    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18c4:	aa e3       	ldi	r26, 0x3A	; 58
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ea e3       	ldi	r30, 0x3A	; 58
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_setupPinDirection+0xb4>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_setupPinDirection+0xb0>
    18e6:	80 95       	com	r24
    18e8:	84 23       	and	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	83 c0       	rjmp	.+262    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	a1 f4       	brne	.+40     	; 0x191c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18f4:	a7 e3       	ldi	r26, 0x37	; 55
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <GPIO_setupPinDirection+0xe4>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <GPIO_setupPinDirection+0xe0>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	6c c0       	rjmp	.+216    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    191c:	a7 e3       	ldi	r26, 0x37	; 55
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_setupPinDirection+0x10c>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_setupPinDirection+0x108>
    193e:	80 95       	com	r24
    1940:	84 23       	and	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	57 c0       	rjmp	.+174    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	a1 f4       	brne	.+40     	; 0x1974 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    194c:	a4 e3       	ldi	r26, 0x34	; 52
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e4 e3       	ldi	r30, 0x34	; 52
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_setupPinDirection+0x13c>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_setupPinDirection+0x138>
    196e:	84 2b       	or	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	40 c0       	rjmp	.+128    	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1974:	a4 e3       	ldi	r26, 0x34	; 52
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e4 e3       	ldi	r30, 0x34	; 52
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_setupPinDirection+0x164>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_setupPinDirection+0x160>
    1996:	80 95       	com	r24
    1998:	84 23       	and	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	2b c0       	rjmp	.+86     	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19a4:	a1 e3       	ldi	r26, 0x31	; 49
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e1 e3       	ldi	r30, 0x31	; 49
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_setupPinDirection+0x194>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_setupPinDirection+0x190>
    19c6:	84 2b       	or	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	14 c0       	rjmp	.+40     	; 0x19f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19cc:	a1 e3       	ldi	r26, 0x31	; 49
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_setupPinDirection+0x1bc>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_setupPinDirection+0x1b8>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <GPIO_writePin+0x6>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <GPIO_writePin+0x8>
    1a0c:	0f 92       	push	r0
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	6a 83       	std	Y+2, r22	; 0x02
    1a16:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	88 30       	cpi	r24, 0x08	; 8
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <GPIO_writePin+0x1c>
    1a1e:	d5 c0       	rjmp	.+426    	; 0x1bca <GPIO_writePin+0x1c6>
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <GPIO_writePin+0x24>
    1a26:	d1 c0       	rjmp	.+418    	; 0x1bca <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
		else
		{
			switch(port_num){
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	3d 83       	std	Y+5, r19	; 0x05
    1a30:	2c 83       	std	Y+4, r18	; 0x04
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <GPIO_writePin+0x3a>
    1a3c:	43 c0       	rjmp	.+134    	; 0x1ac4 <GPIO_writePin+0xc0>
    1a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a40:	3d 81       	ldd	r19, Y+5	; 0x05
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <GPIO_writePin+0x4e>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <GPIO_writePin+0x68>
    1a50:	bc c0       	rjmp	.+376    	; 0x1bca <GPIO_writePin+0x1c6>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <GPIO_writePin+0x5a>
    1a5c:	5f c0       	rjmp	.+190    	; 0x1b1c <GPIO_writePin+0x118>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <GPIO_writePin+0x66>
    1a68:	85 c0       	rjmp	.+266    	; 0x1b74 <GPIO_writePin+0x170>
    1a6a:	af c0       	rjmp	.+350    	; 0x1bca <GPIO_writePin+0x1c6>
			case PORTA_ID :
				if(value == PIN_OUTPUT)
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	a1 f4       	brne	.+40     	; 0x1a9a <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA , pin_num);
    1a72:	ab e3       	ldi	r26, 0x3B	; 59
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	eb e3       	ldi	r30, 0x3B	; 59
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <GPIO_writePin+0x8c>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <GPIO_writePin+0x88>
    1a94:	84 2b       	or	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	98 c0       	rjmp	.+304    	; 0x1bca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA , pin_num);
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <GPIO_writePin+0xb4>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <GPIO_writePin+0xb0>
    1abc:	80 95       	com	r24
    1abe:	84 23       	and	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	83 c0       	rjmp	.+262    	; 0x1bca <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID :
				if(value == PIN_OUTPUT)
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	a1 f4       	brne	.+40     	; 0x1af2 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB , pin_num);
    1aca:	a8 e3       	ldi	r26, 0x38	; 56
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e8 e3       	ldi	r30, 0x38	; 56
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <GPIO_writePin+0xe4>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <GPIO_writePin+0xe0>
    1aec:	84 2b       	or	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	6c c0       	rjmp	.+216    	; 0x1bca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB , pin_num);
    1af2:	a8 e3       	ldi	r26, 0x38	; 56
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e8 e3       	ldi	r30, 0x38	; 56
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <GPIO_writePin+0x10c>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <GPIO_writePin+0x108>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	57 c0       	rjmp	.+174    	; 0x1bca <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID :
				if(value == PIN_OUTPUT)
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	a1 f4       	brne	.+40     	; 0x1b4a <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC , pin_num);
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <GPIO_writePin+0x13c>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <GPIO_writePin+0x138>
    1b44:	84 2b       	or	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	40 c0       	rjmp	.+128    	; 0x1bca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC , pin_num);
    1b4a:	a5 e3       	ldi	r26, 0x35	; 53
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_writePin+0x164>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_writePin+0x160>
    1b6c:	80 95       	com	r24
    1b6e:	84 23       	and	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	2b c0       	rjmp	.+86     	; 0x1bca <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID :
				if(value == PIN_OUTPUT)
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	a1 f4       	brne	.+40     	; 0x1ba2 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD , pin_num);
    1b7a:	a2 e3       	ldi	r26, 0x32	; 50
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e2 e3       	ldi	r30, 0x32	; 50
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <GPIO_writePin+0x194>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <GPIO_writePin+0x190>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD , pin_num);
    1ba2:	a2 e3       	ldi	r26, 0x32	; 50
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e2 e3       	ldi	r30, 0x32	; 50
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_writePin+0x1bc>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_writePin+0x1b8>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
				}
				break;
			}
		}

}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <GPIO_readPin+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <GPIO_readPin+0x8>
    1be2:	0f 92       	push	r0
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	18 f4       	brcc	.+6      	; 0x1bf8 <GPIO_readPin+0x1e>
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	10 f0       	brcs	.+4      	; 0x1bfc <GPIO_readPin+0x22>
			{
				return LOGIC_LOW ;
    1bf8:	1d 82       	std	Y+5, r1	; 0x05
    1bfa:	82 c0       	rjmp	.+260    	; 0x1d00 <GPIO_readPin+0x126>
				/* Do Nothing */
			}
			else
			{
				switch(port_num)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3c 83       	std	Y+4, r19	; 0x04
    1c04:	2b 83       	std	Y+3, r18	; 0x03
    1c06:	4b 81       	ldd	r20, Y+3	; 0x03
    1c08:	5c 81       	ldd	r21, Y+4	; 0x04
    1c0a:	41 30       	cpi	r20, 0x01	; 1
    1c0c:	51 05       	cpc	r21, r1
    1c0e:	79 f1       	breq	.+94     	; 0x1c6e <GPIO_readPin+0x94>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	91 05       	cpc	r25, r1
    1c18:	34 f4       	brge	.+12     	; 0x1c26 <GPIO_readPin+0x4c>
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	21 15       	cp	r18, r1
    1c20:	31 05       	cpc	r19, r1
    1c22:	69 f0       	breq	.+26     	; 0x1c3e <GPIO_readPin+0x64>
    1c24:	6c c0       	rjmp	.+216    	; 0x1cfe <GPIO_readPin+0x124>
    1c26:	4b 81       	ldd	r20, Y+3	; 0x03
    1c28:	5c 81       	ldd	r21, Y+4	; 0x04
    1c2a:	42 30       	cpi	r20, 0x02	; 2
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	b9 f1       	breq	.+110    	; 0x1c9e <GPIO_readPin+0xc4>
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <GPIO_readPin+0x62>
    1c3a:	49 c0       	rjmp	.+146    	; 0x1cce <GPIO_readPin+0xf4>
    1c3c:	60 c0       	rjmp	.+192    	; 0x1cfe <GPIO_readPin+0x124>
				{
				case PORTA_ID :
					if(BIT_IS_SET(PINA , pin_num))
    1c3e:	e9 e3       	ldi	r30, 0x39	; 57
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a9 01       	movw	r20, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <GPIO_readPin+0x7c>
    1c52:	55 95       	asr	r21
    1c54:	47 95       	ror	r20
    1c56:	8a 95       	dec	r24
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <GPIO_readPin+0x78>
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	90 70       	andi	r25, 0x00	; 0
    1c60:	88 23       	and	r24, r24
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <GPIO_readPin+0x90>
					{
						return LOGIC_HIGH ;
    1c64:	51 e0       	ldi	r21, 0x01	; 1
    1c66:	5d 83       	std	Y+5, r21	; 0x05
    1c68:	4b c0       	rjmp	.+150    	; 0x1d00 <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW ;
    1c6a:	1d 82       	std	Y+5, r1	; 0x05
    1c6c:	49 c0       	rjmp	.+146    	; 0x1d00 <GPIO_readPin+0x126>
					}
					break;
				    case PORTB_ID :
					if(BIT_IS_SET(PINB , pin_num))
    1c6e:	e6 e3       	ldi	r30, 0x36	; 54
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a9 01       	movw	r20, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <GPIO_readPin+0xac>
    1c82:	55 95       	asr	r21
    1c84:	47 95       	ror	r20
    1c86:	8a 95       	dec	r24
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <GPIO_readPin+0xa8>
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	81 70       	andi	r24, 0x01	; 1
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	88 23       	and	r24, r24
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <GPIO_readPin+0xc0>
					{
						return LOGIC_HIGH ;
    1c94:	51 e0       	ldi	r21, 0x01	; 1
    1c96:	5d 83       	std	Y+5, r21	; 0x05
    1c98:	33 c0       	rjmp	.+102    	; 0x1d00 <GPIO_readPin+0x126>
					}
						else
					{
						return LOGIC_LOW ;
    1c9a:	1d 82       	std	Y+5, r1	; 0x05
    1c9c:	31 c0       	rjmp	.+98     	; 0x1d00 <GPIO_readPin+0x126>
					}
					break;
				    case PORTC_ID :
					if(BIT_IS_SET(PINC , pin_num))
    1c9e:	e3 e3       	ldi	r30, 0x33	; 51
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_readPin+0xdc>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_readPin+0xd8>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	88 23       	and	r24, r24
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <GPIO_readPin+0xf0>
					{
						return LOGIC_HIGH ;
    1cc4:	51 e0       	ldi	r21, 0x01	; 1
    1cc6:	5d 83       	std	Y+5, r21	; 0x05
    1cc8:	1b c0       	rjmp	.+54     	; 0x1d00 <GPIO_readPin+0x126>
					}
						else
					{
						return LOGIC_LOW ;
    1cca:	1d 82       	std	Y+5, r1	; 0x05
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <GPIO_readPin+0x126>
					}
					break;
				    case PORTD_ID :
					if(BIT_IS_SET(PIND , pin_num))
    1cce:	e0 e3       	ldi	r30, 0x30	; 48
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <GPIO_readPin+0x10c>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <GPIO_readPin+0x108>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	88 23       	and	r24, r24
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <GPIO_readPin+0x120>
					{
						return LOGIC_HIGH ;
    1cf4:	51 e0       	ldi	r21, 0x01	; 1
    1cf6:	5d 83       	std	Y+5, r21	; 0x05
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <GPIO_readPin+0x126>
					}
					    else
			    	{
						return LOGIC_LOW ;
    1cfa:	1d 82       	std	Y+5, r1	; 0x05
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <GPIO_readPin+0x126>
					}
					break;
				}
			}
	return LOGIC_LOW;
    1cfe:	1d 82       	std	Y+5, r1	; 0x05
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05


}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <GPIO_setupPortDirection+0x6>
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <GPIO_setupPortDirection+0x8>
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	90 f5       	brcc	.+100    	; 0x1d8c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3c 83       	std	Y+4, r19	; 0x04
    1d30:	2b 83       	std	Y+3, r18	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	d1 f0       	breq	.+52     	; 0x1d70 <GPIO_setupPortDirection+0x5e>
    1d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <GPIO_setupPortDirection+0x3e>
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	61 f0       	breq	.+24     	; 0x1d66 <GPIO_setupPortDirection+0x54>
    1d4e:	1e c0       	rjmp	.+60     	; 0x1d8c <GPIO_setupPortDirection+0x7a>
    1d50:	2b 81       	ldd	r18, Y+3	; 0x03
    1d52:	3c 81       	ldd	r19, Y+4	; 0x04
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <GPIO_setupPortDirection+0x68>
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	91 05       	cpc	r25, r1
    1d62:	81 f0       	breq	.+32     	; 0x1d84 <GPIO_setupPortDirection+0x72>
    1d64:	13 c0       	rjmp	.+38     	; 0x1d8c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d66:	ea e3       	ldi	r30, 0x3A	; 58
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	80 83       	st	Z, r24
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d70:	e7 e3       	ldi	r30, 0x37	; 55
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 83       	st	Z, r24
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	80 83       	st	Z, r24
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d84:	e1 e3       	ldi	r30, 0x31	; 49
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <GPIO_writePort+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <GPIO_writePort+0x8>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	84 30       	cpi	r24, 0x04	; 4
    1dae:	90 f5       	brcc	.+100    	; 0x1e14 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
		else
		{
			switch(port_num)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3c 83       	std	Y+4, r19	; 0x04
    1db8:	2b 83       	std	Y+3, r18	; 0x03
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	d1 f0       	breq	.+52     	; 0x1df8 <GPIO_writePort+0x5e>
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <GPIO_writePort+0x3e>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <GPIO_writePort+0x54>
    1dd6:	1e c0       	rjmp	.+60     	; 0x1e14 <GPIO_writePort+0x7a>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <GPIO_writePort+0x68>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	81 f0       	breq	.+32     	; 0x1e0c <GPIO_writePort+0x72>
    1dec:	13 c0       	rjmp	.+38     	; 0x1e14 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
				PORTA=value;
    1dee:	eb e3       	ldi	r30, 0x3B	; 59
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	0e c0       	rjmp	.+28     	; 0x1e14 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB=value;
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC=value;
    1e02:	e5 e3       	ldi	r30, 0x35	; 53
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD=value;
    1e0c:	e2 e3       	ldi	r30, 0x32	; 50
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 83       	st	Z, r24
				break;

			}
		}

}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <GPIO_readPort+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <GPIO_readPort+0x8>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	10 f0       	brcs	.+4      	; 0x1e3a <GPIO_readPort+0x18>
			{
				/* Do Nothing */
		return LOGIC_LOW;
    1e36:	1c 82       	std	Y+4, r1	; 0x04
    1e38:	34 c0       	rjmp	.+104    	; 0x1ea2 <GPIO_readPort+0x80>
			}
			else
			{
				switch(port_num)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	3b 83       	std	Y+3, r19	; 0x03
    1e42:	2a 83       	std	Y+2, r18	; 0x02
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	d1 f0       	breq	.+52     	; 0x1e82 <GPIO_readPort+0x60>
    1e4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e50:	3b 81       	ldd	r19, Y+3	; 0x03
    1e52:	22 30       	cpi	r18, 0x02	; 2
    1e54:	31 05       	cpc	r19, r1
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <GPIO_readPort+0x40>
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <GPIO_readPort+0x56>
    1e60:	1f c0       	rjmp	.+62     	; 0x1ea0 <GPIO_readPort+0x7e>
    1e62:	2a 81       	ldd	r18, Y+2	; 0x02
    1e64:	3b 81       	ldd	r19, Y+3	; 0x03
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	81 f0       	breq	.+32     	; 0x1e8c <GPIO_readPort+0x6a>
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	83 30       	cpi	r24, 0x03	; 3
    1e72:	91 05       	cpc	r25, r1
    1e74:	81 f0       	breq	.+32     	; 0x1e96 <GPIO_readPort+0x74>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <GPIO_readPort+0x7e>
				{
				case PORTA_ID:
					return PINA;
    1e78:	e9 e3       	ldi	r30, 0x39	; 57
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	90 81       	ld	r25, Z
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	10 c0       	rjmp	.+32     	; 0x1ea2 <GPIO_readPort+0x80>
					break;
				case PORTB_ID:
					return PINB;
    1e82:	e6 e3       	ldi	r30, 0x36	; 54
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	20 81       	ld	r18, Z
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <GPIO_readPort+0x80>
					break;
				case PORTC_ID:
					return PINC;
    1e8c:	e3 e3       	ldi	r30, 0x33	; 51
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	30 81       	ld	r19, Z
    1e92:	3c 83       	std	Y+4, r19	; 0x04
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <GPIO_readPort+0x80>
					break;
				case PORTD_ID:
					return PIND;
    1e96:	e0 e3       	ldi	r30, 0x30	; 48
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8c 83       	std	Y+4, r24	; 0x04
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <GPIO_readPort+0x80>
					break;

				}
			}
	return 0 ;
    1ea0:	1c 82       	std	Y+4, r1	; 0x04
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <__vector_10>:
static volatile void (*g_callBackPtr_T0)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_T1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_T2)(void) = NULL_PTR;
/**********************************************************************TIMER0*************************************************************/
ISR(TIMER0_COMP_vect)
{
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	6f 93       	push	r22
    1ec6:	7f 93       	push	r23
    1ec8:	8f 93       	push	r24
    1eca:	9f 93       	push	r25
    1ecc:	af 93       	push	r26
    1ece:	bf 93       	push	r27
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    1edc:	80 91 94 00 	lds	r24, 0x0094
    1ee0:	90 91 95 00 	lds	r25, 0x0095
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	29 f0       	breq	.+10     	; 0x1ef2 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ee8:	e0 91 94 00 	lds	r30, 0x0094
    1eec:	f0 91 95 00 	lds	r31, 0x0095
    1ef0:	09 95       	icall
	}
}
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	ff 91       	pop	r31
    1ef8:	ef 91       	pop	r30
    1efa:	bf 91       	pop	r27
    1efc:	af 91       	pop	r26
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	7f 91       	pop	r23
    1f04:	6f 91       	pop	r22
    1f06:	5f 91       	pop	r21
    1f08:	4f 91       	pop	r20
    1f0a:	3f 91       	pop	r19
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <TIMER1_COMP_vect>:

ISR(TIMER1_COMP_vect)
{
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	2f 93       	push	r18
    1f24:	3f 93       	push	r19
    1f26:	4f 93       	push	r20
    1f28:	5f 93       	push	r21
    1f2a:	6f 93       	push	r22
    1f2c:	7f 93       	push	r23
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	af 93       	push	r26
    1f34:	bf 93       	push	r27
    1f36:	ef 93       	push	r30
    1f38:	ff 93       	push	r31
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    1f42:	80 91 96 00 	lds	r24, 0x0096
    1f46:	90 91 97 00 	lds	r25, 0x0097
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <TIMER1_COMP_vect+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f4e:	e0 91 96 00 	lds	r30, 0x0096
    1f52:	f0 91 97 00 	lds	r31, 0x0097
    1f56:	09 95       	icall
	}
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	ff 91       	pop	r31
    1f5e:	ef 91       	pop	r30
    1f60:	bf 91       	pop	r27
    1f62:	af 91       	pop	r26
    1f64:	9f 91       	pop	r25
    1f66:	8f 91       	pop	r24
    1f68:	7f 91       	pop	r23
    1f6a:	6f 91       	pop	r22
    1f6c:	5f 91       	pop	r21
    1f6e:	4f 91       	pop	r20
    1f70:	3f 91       	pop	r19
    1f72:	2f 91       	pop	r18
    1f74:	0f 90       	pop	r0
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	0f 90       	pop	r0
    1f7a:	1f 90       	pop	r1
    1f7c:	18 95       	reti

00001f7e <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    1f7e:	1f 92       	push	r1
    1f80:	0f 92       	push	r0
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	0f 92       	push	r0
    1f86:	11 24       	eor	r1, r1
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T2 != NULL_PTR)
    1fa8:	80 91 98 00 	lds	r24, 0x0098
    1fac:	90 91 99 00 	lds	r25, 0x0099
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1fb4:	e0 91 98 00 	lds	r30, 0x0098
    1fb8:	f0 91 99 00 	lds	r31, 0x0099
    1fbc:	09 95       	icall
	}
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0f 90       	pop	r0
    1fe0:	1f 90       	pop	r1
    1fe2:	18 95       	reti

00001fe4 <Timer_init>:
void Timer_init(const Timer_ConfigType * Config_Ptr){
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	2a 97       	sbiw	r28, 0x0a	; 10
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr == NULL_PTR)return ;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	09 f4       	brne	.+2      	; 0x2006 <Timer_init+0x22>
    2004:	7b c1       	rjmp	.+758    	; 0x22fc <Timer_init+0x318>
	if(Config_Ptr->timer_ID == TIMER0){
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	84 81       	ldd	r24, Z+4	; 0x04
    200c:	88 23       	and	r24, r24
    200e:	19 f5       	brne	.+70     	; 0x2056 <Timer_init+0x72>
		TCNT0 = Config_Ptr->timer_InitialValue ;
    2010:	a2 e5       	ldi	r26, 0x52	; 82
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e9 81       	ldd	r30, Y+1	; 0x01
    2016:	fa 81       	ldd	r31, Y+2	; 0x02
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == TIMER_MODE_COMPARE){
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	86 81       	ldd	r24, Z+6	; 0x06
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	09 f0       	breq	.+2      	; 0x202a <Timer_init+0x46>
    2028:	68 c0       	rjmp	.+208    	; 0x20fa <Timer_init+0x116>
			TCCR0 |= (1 << WGM01);
    202a:	a3 e5       	ldi	r26, 0x53	; 83
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e3 e5       	ldi	r30, 0x53	; 83
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	88 60       	ori	r24, 0x08	; 8
    2036:	8c 93       	st	X, r24
			OCR0 = (uint8)(Config_Ptr->timer_compare_MatchValue);
    2038:	ac e5       	ldi	r26, 0x5C	; 92
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e9 81       	ldd	r30, Y+1	; 0x01
    203e:	fa 81       	ldd	r31, Y+2	; 0x02
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	8c 93       	st	X, r24
			TIMSK |=(1<<OCIE0);
    2046:	a9 e5       	ldi	r26, 0x59	; 89
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e9 e5       	ldi	r30, 0x59	; 89
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	82 60       	ori	r24, 0x02	; 2
    2052:	8c 93       	st	X, r24
    2054:	52 c0       	rjmp	.+164    	; 0x20fa <Timer_init+0x116>
		}
	}
	else if(Config_Ptr->timer_mode == TIMER1){
    2056:	e9 81       	ldd	r30, Y+1	; 0x01
    2058:	fa 81       	ldd	r31, Y+2	; 0x02
    205a:	86 81       	ldd	r24, Z+6	; 0x06
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	39 f5       	brne	.+78     	; 0x20ae <Timer_init+0xca>
		TCNT1 = Config_Ptr->timer_InitialValue;
    2060:	ac e4       	ldi	r26, 0x4C	; 76
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e9 81       	ldd	r30, Y+1	; 0x01
    2066:	fa 81       	ldd	r31, Y+2	; 0x02
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	11 96       	adiw	r26, 0x01	; 1
    206e:	9c 93       	st	X, r25
    2070:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode == TIMER_MODE_COMPARE){
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	86 81       	ldd	r24, Z+6	; 0x06
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	09 f0       	breq	.+2      	; 0x207e <Timer_init+0x9a>
    207c:	3e c0       	rjmp	.+124    	; 0x20fa <Timer_init+0x116>
			TCCR1B |=(1<<WGM12);
    207e:	ae e4       	ldi	r26, 0x4E	; 78
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ee e4       	ldi	r30, 0x4E	; 78
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 60       	ori	r24, 0x08	; 8
    208a:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue ;
    208c:	aa e4       	ldi	r26, 0x4A	; 74
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e9 81       	ldd	r30, Y+1	; 0x01
    2092:	fa 81       	ldd	r31, Y+2	; 0x02
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	9c 93       	st	X, r25
    209c:	8e 93       	st	-X, r24
			TIMSK |=(1<<OCIE1A);
    209e:	a9 e5       	ldi	r26, 0x59	; 89
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e9 e5       	ldi	r30, 0x59	; 89
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 61       	ori	r24, 0x10	; 16
    20aa:	8c 93       	st	X, r24
    20ac:	26 c0       	rjmp	.+76     	; 0x20fa <Timer_init+0x116>
		}

	}
	else if(Config_Ptr->timer_mode == TIMER2){
    20ae:	e9 81       	ldd	r30, Y+1	; 0x01
    20b0:	fa 81       	ldd	r31, Y+2	; 0x02
    20b2:	86 81       	ldd	r24, Z+6	; 0x06
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	09 f5       	brne	.+66     	; 0x20fa <Timer_init+0x116>
		TCNT2 = Config_Ptr->timer_InitialValue ;
    20b8:	a4 e4       	ldi	r26, 0x44	; 68
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e9 81       	ldd	r30, Y+1	; 0x01
    20be:	fa 81       	ldd	r31, Y+2	; 0x02
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode ==TIMER_MODE_COMPARE){
    20c6:	e9 81       	ldd	r30, Y+1	; 0x01
    20c8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ca:	86 81       	ldd	r24, Z+6	; 0x06
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	a9 f4       	brne	.+42     	; 0x20fa <Timer_init+0x116>
			TCCR2 |=(1<<WGM21);
    20d0:	a5 e4       	ldi	r26, 0x45	; 69
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e5 e4       	ldi	r30, 0x45	; 69
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	88 60       	ori	r24, 0x08	; 8
    20dc:	8c 93       	st	X, r24
			OCR2 = (uint8)(Config_Ptr->timer_compare_MatchValue);
    20de:	a3 e4       	ldi	r26, 0x43	; 67
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	8c 93       	st	X, r24
			TIMSK |=(1<<OCIE2);
    20ec:	a9 e5       	ldi	r26, 0x59	; 89
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e9 e5       	ldi	r30, 0x59	; 89
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 68       	ori	r24, 0x80	; 128
    20f8:	8c 93       	st	X, r24
		}
	}
	switch(Config_Ptr->timer_ID){
    20fa:	e9 81       	ldd	r30, Y+1	; 0x01
    20fc:	fa 81       	ldd	r31, Y+2	; 0x02
    20fe:	84 81       	ldd	r24, Z+4	; 0x04
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	3a 87       	std	Y+10, r19	; 0x0a
    2106:	29 87       	std	Y+9, r18	; 0x09
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <Timer_init+0x130>
    2112:	59 c0       	rjmp	.+178    	; 0x21c6 <Timer_init+0x1e2>
    2114:	29 85       	ldd	r18, Y+9	; 0x09
    2116:	3a 85       	ldd	r19, Y+10	; 0x0a
    2118:	22 30       	cpi	r18, 0x02	; 2
    211a:	31 05       	cpc	r19, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <Timer_init+0x13c>
    211e:	a1 c0       	rjmp	.+322    	; 0x2262 <Timer_init+0x27e>
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	09 f0       	breq	.+2      	; 0x212a <Timer_init+0x146>
    2128:	e9 c0       	rjmp	.+466    	; 0x22fc <Timer_init+0x318>
	case TIMER0 :
		switch(Config_Ptr->timer_clock){
    212a:	e9 81       	ldd	r30, Y+1	; 0x01
    212c:	fa 81       	ldd	r31, Y+2	; 0x02
    212e:	85 81       	ldd	r24, Z+5	; 0x05
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	38 87       	std	Y+8, r19	; 0x08
    2136:	2f 83       	std	Y+7, r18	; 0x07
    2138:	8f 81       	ldd	r24, Y+7	; 0x07
    213a:	98 85       	ldd	r25, Y+8	; 0x08
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	91 05       	cpc	r25, r1
    2140:	51 f1       	breq	.+84     	; 0x2196 <Timer_init+0x1b2>
    2142:	2f 81       	ldd	r18, Y+7	; 0x07
    2144:	38 85       	ldd	r19, Y+8	; 0x08
    2146:	23 30       	cpi	r18, 0x03	; 3
    2148:	31 05       	cpc	r19, r1
    214a:	54 f4       	brge	.+20     	; 0x2160 <Timer_init+0x17c>
    214c:	8f 81       	ldd	r24, Y+7	; 0x07
    214e:	98 85       	ldd	r25, Y+8	; 0x08
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	89 f0       	breq	.+34     	; 0x2176 <Timer_init+0x192>
    2154:	2f 81       	ldd	r18, Y+7	; 0x07
    2156:	38 85       	ldd	r19, Y+8	; 0x08
    2158:	21 30       	cpi	r18, 0x01	; 1
    215a:	31 05       	cpc	r19, r1
    215c:	a1 f0       	breq	.+40     	; 0x2186 <Timer_init+0x1a2>
    215e:	ce c0       	rjmp	.+412    	; 0x22fc <Timer_init+0x318>
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	f1 f0       	breq	.+60     	; 0x21a6 <Timer_init+0x1c2>
    216a:	2f 81       	ldd	r18, Y+7	; 0x07
    216c:	38 85       	ldd	r19, Y+8	; 0x08
    216e:	24 30       	cpi	r18, 0x04	; 4
    2170:	31 05       	cpc	r19, r1
    2172:	09 f1       	breq	.+66     	; 0x21b6 <Timer_init+0x1d2>
    2174:	c3 c0       	rjmp	.+390    	; 0x22fc <Timer_init+0x318>
		case NO_PRESCALER :
			TCCR0 |=(1<<CS00);
    2176:	a3 e5       	ldi	r26, 0x53	; 83
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e3 e5       	ldi	r30, 0x53	; 83
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	81 60       	ori	r24, 0x01	; 1
    2182:	8c 93       	st	X, r24
    2184:	bb c0       	rjmp	.+374    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_8:
			TCCR0 |=(CS01);
    2186:	a3 e5       	ldi	r26, 0x53	; 83
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e3 e5       	ldi	r30, 0x53	; 83
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	81 60       	ori	r24, 0x01	; 1
    2192:	8c 93       	st	X, r24
    2194:	b3 c0       	rjmp	.+358    	; 0x22fc <Timer_init+0x318>
			break;
		case TIMER_PRESCALER_64:
			TCCR0 |=(1<<CS01)|(1<<CS00);
    2196:	a3 e5       	ldi	r26, 0x53	; 83
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e3 e5       	ldi	r30, 0x53	; 83
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	83 60       	ori	r24, 0x03	; 3
    21a2:	8c 93       	st	X, r24
    21a4:	ab c0       	rjmp	.+342    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_256:
			TCCR0 |=(1<<CS02);
    21a6:	a3 e5       	ldi	r26, 0x53	; 83
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e3 e5       	ldi	r30, 0x53	; 83
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	84 60       	ori	r24, 0x04	; 4
    21b2:	8c 93       	st	X, r24
    21b4:	a3 c0       	rjmp	.+326    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_1024 :
			TCCR0 |=(1<<CS02)|(1<<CS00);
    21b6:	a3 e5       	ldi	r26, 0x53	; 83
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e3 e5       	ldi	r30, 0x53	; 83
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	85 60       	ori	r24, 0x05	; 5
    21c2:	8c 93       	st	X, r24
    21c4:	9b c0       	rjmp	.+310    	; 0x22fc <Timer_init+0x318>
			break;
		}
		break ;
	case TIMER1 :
		switch(Config_Ptr->timer_clock){
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	85 81       	ldd	r24, Z+5	; 0x05
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	2d 83       	std	Y+5, r18	; 0x05
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	91 05       	cpc	r25, r1
    21dc:	51 f1       	breq	.+84     	; 0x2232 <Timer_init+0x24e>
    21de:	2d 81       	ldd	r18, Y+5	; 0x05
    21e0:	3e 81       	ldd	r19, Y+6	; 0x06
    21e2:	23 30       	cpi	r18, 0x03	; 3
    21e4:	31 05       	cpc	r19, r1
    21e6:	54 f4       	brge	.+20     	; 0x21fc <Timer_init+0x218>
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	89 f0       	breq	.+34     	; 0x2212 <Timer_init+0x22e>
    21f0:	2d 81       	ldd	r18, Y+5	; 0x05
    21f2:	3e 81       	ldd	r19, Y+6	; 0x06
    21f4:	21 30       	cpi	r18, 0x01	; 1
    21f6:	31 05       	cpc	r19, r1
    21f8:	a1 f0       	breq	.+40     	; 0x2222 <Timer_init+0x23e>
    21fa:	80 c0       	rjmp	.+256    	; 0x22fc <Timer_init+0x318>
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	91 05       	cpc	r25, r1
    2204:	f1 f0       	breq	.+60     	; 0x2242 <Timer_init+0x25e>
    2206:	2d 81       	ldd	r18, Y+5	; 0x05
    2208:	3e 81       	ldd	r19, Y+6	; 0x06
    220a:	24 30       	cpi	r18, 0x04	; 4
    220c:	31 05       	cpc	r19, r1
    220e:	09 f1       	breq	.+66     	; 0x2252 <Timer_init+0x26e>
    2210:	75 c0       	rjmp	.+234    	; 0x22fc <Timer_init+0x318>
		case NO_PRESCALER :
			TCCR1B |=(1<<CS10);
    2212:	ae e4       	ldi	r26, 0x4E	; 78
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	ee e4       	ldi	r30, 0x4E	; 78
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	81 60       	ori	r24, 0x01	; 1
    221e:	8c 93       	st	X, r24
    2220:	6d c0       	rjmp	.+218    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_8:
			TCCR1B |=(CS11);
    2222:	ae e4       	ldi	r26, 0x4E	; 78
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ee e4       	ldi	r30, 0x4E	; 78
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	81 60       	ori	r24, 0x01	; 1
    222e:	8c 93       	st	X, r24
    2230:	65 c0       	rjmp	.+202    	; 0x22fc <Timer_init+0x318>
			break;
		case TIMER_PRESCALER_64:
			TCCR1B |=(1<<CS11)|(1<<CS10);
    2232:	ae e4       	ldi	r26, 0x4E	; 78
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ee e4       	ldi	r30, 0x4E	; 78
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	83 60       	ori	r24, 0x03	; 3
    223e:	8c 93       	st	X, r24
    2240:	5d c0       	rjmp	.+186    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_256:
			TCCR1B |=(1<<CS12);
    2242:	ae e4       	ldi	r26, 0x4E	; 78
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ee e4       	ldi	r30, 0x4E	; 78
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	84 60       	ori	r24, 0x04	; 4
    224e:	8c 93       	st	X, r24
    2250:	55 c0       	rjmp	.+170    	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_1024 :
			TCCR1B |=(1<<CS12)|(1<<CS10);
    2252:	ae e4       	ldi	r26, 0x4E	; 78
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	ee e4       	ldi	r30, 0x4E	; 78
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	85 60       	ori	r24, 0x05	; 5
    225e:	8c 93       	st	X, r24
    2260:	4d c0       	rjmp	.+154    	; 0x22fc <Timer_init+0x318>
			break;
		}
		break ;
	case TIMER2 :
		switch(Config_Ptr->timer_clock){
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	85 81       	ldd	r24, Z+5	; 0x05
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	3c 83       	std	Y+4, r19	; 0x04
    226e:	2b 83       	std	Y+3, r18	; 0x03
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	82 30       	cpi	r24, 0x02	; 2
    2276:	91 05       	cpc	r25, r1
    2278:	51 f1       	breq	.+84     	; 0x22ce <Timer_init+0x2ea>
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	23 30       	cpi	r18, 0x03	; 3
    2280:	31 05       	cpc	r19, r1
    2282:	54 f4       	brge	.+20     	; 0x2298 <Timer_init+0x2b4>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	89 f0       	breq	.+34     	; 0x22ae <Timer_init+0x2ca>
    228c:	2b 81       	ldd	r18, Y+3	; 0x03
    228e:	3c 81       	ldd	r19, Y+4	; 0x04
    2290:	21 30       	cpi	r18, 0x01	; 1
    2292:	31 05       	cpc	r19, r1
    2294:	a1 f0       	breq	.+40     	; 0x22be <Timer_init+0x2da>
    2296:	32 c0       	rjmp	.+100    	; 0x22fc <Timer_init+0x318>
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	83 30       	cpi	r24, 0x03	; 3
    229e:	91 05       	cpc	r25, r1
    22a0:	f1 f0       	breq	.+60     	; 0x22de <Timer_init+0x2fa>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	24 30       	cpi	r18, 0x04	; 4
    22a8:	31 05       	cpc	r19, r1
    22aa:	09 f1       	breq	.+66     	; 0x22ee <Timer_init+0x30a>
    22ac:	27 c0       	rjmp	.+78     	; 0x22fc <Timer_init+0x318>
		case NO_PRESCALER :
			TCCR2 |=(1<<CS20);
    22ae:	a5 e4       	ldi	r26, 0x45	; 69
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e5 e4       	ldi	r30, 0x45	; 69
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	81 60       	ori	r24, 0x01	; 1
    22ba:	8c 93       	st	X, r24
    22bc:	1f c0       	rjmp	.+62     	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_8:
			TCCR2 |=(CS21);
    22be:	a5 e4       	ldi	r26, 0x45	; 69
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e4       	ldi	r30, 0x45	; 69
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	8c 93       	st	X, r24
    22cc:	17 c0       	rjmp	.+46     	; 0x22fc <Timer_init+0x318>
			break;
		case TIMER_PRESCALER_64:
			TCCR2 |=(1<<CS21)|(1<<CS20);
    22ce:	a5 e4       	ldi	r26, 0x45	; 69
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e4       	ldi	r30, 0x45	; 69
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	83 60       	ori	r24, 0x03	; 3
    22da:	8c 93       	st	X, r24
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_256:
			TCCR2 |=(1<<CS22);
    22de:	a5 e4       	ldi	r26, 0x45	; 69
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e4       	ldi	r30, 0x45	; 69
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	84 60       	ori	r24, 0x04	; 4
    22ea:	8c 93       	st	X, r24
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <Timer_init+0x318>
			break ;
		case TIMER_PRESCALER_1024 :
			TCCR2 |=(1<<CS22)|(1<<CS20);
    22ee:	a5 e4       	ldi	r26, 0x45	; 69
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e5 e4       	ldi	r30, 0x45	; 69
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	85 60       	ori	r24, 0x05	; 5
    22fa:	8c 93       	st	X, r24
			break;
		}
		break ;
	}
}
    22fc:	2a 96       	adiw	r28, 0x0a	; 10
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <Timer_deInit>:
void Timer_deInit(Timer_ID timer_type){
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type == TIMER0 ){
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	88 23       	and	r24, r24
    231e:	c1 f4       	brne	.+48     	; 0x2350 <Timer_deInit+0x42>
		TCCR0 = 0 ;
    2320:	e3 e5       	ldi	r30, 0x53	; 83
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	10 82       	st	Z, r1
		OCR0  = 0 ;
    2326:	ec e5       	ldi	r30, 0x5C	; 92
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    232c:	e2 e5       	ldi	r30, 0x52	; 82
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8d 7f       	andi	r24, 0xFD	; 253
    233e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0);
    2340:	a9 e5       	ldi	r26, 0x59	; 89
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e9 e5       	ldi	r30, 0x59	; 89
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	8e 7f       	andi	r24, 0xFE	; 254
    234c:	8c 93       	st	X, r24
    234e:	4c c0       	rjmp	.+152    	; 0x23e8 <Timer_deInit+0xda>
	}
	else if(timer_type == TIMER1){
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	79 f5       	brne	.+94     	; 0x23b4 <Timer_deInit+0xa6>
		TCCR1A = 0 ;
    2356:	ef e4       	ldi	r30, 0x4F	; 79
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	10 82       	st	Z, r1
		TCCR1B = 0 ;
    235c:	ee e4       	ldi	r30, 0x4E	; 78
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	10 82       	st	Z, r1
		TCNT1 =  0 ;
    2362:	ec e4       	ldi	r30, 0x4C	; 76
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	11 82       	std	Z+1, r1	; 0x01
    2368:	10 82       	st	Z, r1
		OCR1A = 0 ;
    236a:	ea e4       	ldi	r30, 0x4A	; 74
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	11 82       	std	Z+1, r1	; 0x01
    2370:	10 82       	st	Z, r1
		OCR1B = 0 ;
    2372:	e8 e4       	ldi	r30, 0x48	; 72
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	11 82       	std	Z+1, r1	; 0x01
    2378:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TICIE1);
    237a:	a9 e5       	ldi	r26, 0x59	; 89
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e9 e5       	ldi	r30, 0x59	; 89
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8f 7d       	andi	r24, 0xDF	; 223
    2386:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    2388:	a9 e5       	ldi	r26, 0x59	; 89
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e9 e5       	ldi	r30, 0x59	; 89
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	8f 7e       	andi	r24, 0xEF	; 239
    2394:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    2396:	a9 e5       	ldi	r26, 0x59	; 89
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e9 e5       	ldi	r30, 0x59	; 89
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	87 7f       	andi	r24, 0xF7	; 247
    23a2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    23a4:	a9 e5       	ldi	r26, 0x59	; 89
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e9 e5       	ldi	r30, 0x59	; 89
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8b 7f       	andi	r24, 0xFB	; 251
    23b0:	8c 93       	st	X, r24
    23b2:	1a c0       	rjmp	.+52     	; 0x23e8 <Timer_deInit+0xda>
	}
	else if(timer_type == TIMER2){
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	b9 f4       	brne	.+46     	; 0x23e8 <Timer_deInit+0xda>
		TCCR2 = 0 ;
    23ba:	e5 e4       	ldi	r30, 0x45	; 69
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	10 82       	st	Z, r1
		OCR2  = 0 ;
    23c0:	e3 e4       	ldi	r30, 0x43	; 67
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	10 82       	st	Z, r1
		TCNT2 = 0 ;
    23c6:	e4 e4       	ldi	r30, 0x44	; 68
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE2);
    23cc:	a9 e5       	ldi	r26, 0x59	; 89
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e9 e5       	ldi	r30, 0x59	; 89
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 77       	andi	r24, 0x7F	; 127
    23d8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE2);
    23da:	a9 e5       	ldi	r26, 0x59	; 89
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e9 e5       	ldi	r30, 0x59	; 89
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8f 7b       	andi	r24, 0xBF	; 191
    23e6:	8c 93       	st	X, r24
	}

}
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID a_timer_ID ){
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <Timer_setCallBack+0x6>
    23f6:	0f 92       	push	r0
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID == TIMER0){
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	88 23       	and	r24, r24
    2406:	39 f4       	brne	.+14     	; 0x2416 <Timer_setCallBack+0x26>
		g_callBackPtr_T0 = a_ptr;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	90 93 95 00 	sts	0x0095, r25
    2410:	80 93 94 00 	sts	0x0094, r24
    2414:	13 c0       	rjmp	.+38     	; 0x243c <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER1){
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	39 f4       	brne	.+14     	; 0x242a <Timer_setCallBack+0x3a>
		g_callBackPtr_T1 = a_ptr;
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	9a 81       	ldd	r25, Y+2	; 0x02
    2420:	90 93 97 00 	sts	0x0097, r25
    2424:	80 93 96 00 	sts	0x0096, r24
    2428:	09 c0       	rjmp	.+18     	; 0x243c <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER2){
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	31 f4       	brne	.+12     	; 0x243c <Timer_setCallBack+0x4c>
		g_callBackPtr_T2 = a_ptr;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	9a 81       	ldd	r25, Y+2	; 0x02
    2434:	90 93 99 00 	sts	0x0099, r25
    2438:	80 93 98 00 	sts	0x0098, r24
	}
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <TWI_init+0xa>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (uint8)((F_CPU / (2UL * Config_Ptr->bit_rate)) - 8);
    245a:	00 e2       	ldi	r16, 0x20	; 32
    245c:	10 e0       	ldi	r17, 0x00	; 0
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	81 81       	ldd	r24, Z+1	; 0x01
    2464:	92 81       	ldd	r25, Z+2	; 0x02
    2466:	a3 81       	ldd	r26, Z+3	; 0x03
    2468:	b4 81       	ldd	r27, Z+4	; 0x04
    246a:	9c 01       	movw	r18, r24
    246c:	ad 01       	movw	r20, r26
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	44 1f       	adc	r20, r20
    2474:	55 1f       	adc	r21, r21
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	92 e1       	ldi	r25, 0x12	; 18
    247a:	aa e7       	ldi	r26, 0x7A	; 122
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodsi4>
    2486:	da 01       	movw	r26, r20
    2488:	c9 01       	movw	r24, r18
    248a:	88 50       	subi	r24, 0x08	; 8
    248c:	f8 01       	movw	r30, r16
    248e:	80 83       	st	Z, r24
    TWSR = 0x00;
    2490:	e1 e2       	ldi	r30, 0x21	; 33
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	10 82       	st	Z, r1
    TWAR = Config_Ptr->address << 1;
    2496:	a2 e2       	ldi	r26, 0x22	; 34
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	80 81       	ld	r24, Z
    24a0:	88 0f       	add	r24, r24
    24a2:	8c 93       	st	X, r24
    TWCR = (1 << TWEN);
    24a4:	e6 e5       	ldi	r30, 0x56	; 86
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	84 e0       	ldi	r24, 0x04	; 4
    24aa:	80 83       	st	Z, r24
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <TWI_start>:

void TWI_start(void)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    24c2:	e6 e5       	ldi	r30, 0x56	; 86
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	84 ea       	ldi	r24, 0xA4	; 164
    24c8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    24ca:	e6 e5       	ldi	r30, 0x56	; 86
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	88 23       	and	r24, r24
    24d2:	dc f7       	brge	.-10     	; 0x24ca <TWI_start+0x10>
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <TWI_stop>:

void TWI_stop(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    24e2:	e6 e5       	ldi	r30, 0x56	; 86
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	84 e9       	ldi	r24, 0x94	; 148
    24e8:	80 83       	st	Z, r24
}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	0f 92       	push	r0
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    24fc:	e3 e2       	ldi	r30, 0x23	; 35
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2504:	e6 e5       	ldi	r30, 0x56	; 86
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	84 e8       	ldi	r24, 0x84	; 132
    250a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    250c:	e6 e5       	ldi	r30, 0x56	; 86
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	88 23       	and	r24, r24
    2514:	dc f7       	brge	.-10     	; 0x250c <TWI_writeByte+0x1c>
}
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2526:	e6 e5       	ldi	r30, 0x56	; 86
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	84 ec       	ldi	r24, 0xC4	; 196
    252c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    252e:	e6 e5       	ldi	r30, 0x56	; 86
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	dc f7       	brge	.-10     	; 0x252e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2538:	e3 e2       	ldi	r30, 0x23	; 35
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    254c:	e6 e5       	ldi	r30, 0x56	; 86
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	84 e8       	ldi	r24, 0x84	; 132
    2552:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2554:	e6 e5       	ldi	r30, 0x56	; 86
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	88 23       	and	r24, r24
    255c:	dc f7       	brge	.-10     	; 0x2554 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    255e:	e3 e2       	ldi	r30, 0x23	; 35
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2574:	e1 e2       	ldi	r30, 0x21	; 33
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	88 7f       	andi	r24, 0xF8	; 248
    257c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <UART_init+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <UART_init+0x8>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    259c:	eb e2       	ldi	r30, 0x2B	; 43
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    25a4:	ea e2       	ldi	r30, 0x2A	; 42
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	88 e1       	ldi	r24, 0x18	; 24
    25aa:	80 83       	st	Z, r24
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data & 0x04);
    25ac:	aa e2       	ldi	r26, 0x2A	; 42
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	ea e2       	ldi	r30, 0x2A	; 42
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	98 2f       	mov	r25, r24
    25b8:	9b 7f       	andi	r25, 0xFB	; 251
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	80 81       	ld	r24, Z
    25c0:	84 70       	andi	r24, 0x04	; 4
    25c2:	89 2b       	or	r24, r25
    25c4:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) ;
    25c6:	e0 e4       	ldi	r30, 0x40	; 64
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 e8       	ldi	r24, 0x80	; 128
    25cc:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF)|((Config_Ptr->parity & 0X03)<<4);
    25ce:	a0 e4       	ldi	r26, 0x40	; 64
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e0 e4       	ldi	r30, 0x40	; 64
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	28 2f       	mov	r18, r24
    25da:	2f 7c       	andi	r18, 0xCF	; 207
    25dc:	eb 81       	ldd	r30, Y+3	; 0x03
    25de:	fc 81       	ldd	r31, Y+4	; 0x04
    25e0:	81 81       	ldd	r24, Z+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	83 70       	andi	r24, 0x03	; 3
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	82 95       	swap	r24
    25ec:	92 95       	swap	r25
    25ee:	90 7f       	andi	r25, 0xF0	; 240
    25f0:	98 27       	eor	r25, r24
    25f2:	80 7f       	andi	r24, 0xF0	; 240
    25f4:	98 27       	eor	r25, r24
    25f6:	82 2b       	or	r24, r18
    25f8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7)|(( Config_Ptr->stop_bit& 0X01)<<3);
    25fa:	a0 e4       	ldi	r26, 0x40	; 64
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e0 e4       	ldi	r30, 0x40	; 64
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	27 7f       	andi	r18, 0xF7	; 247
    2608:	eb 81       	ldd	r30, Y+3	; 0x03
    260a:	fc 81       	ldd	r31, Y+4	; 0x04
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	81 70       	andi	r24, 0x01	; 1
    2614:	90 70       	andi	r25, 0x00	; 0
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	82 2b       	or	r24, r18
    2624:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9)|((Config_Ptr->bit_data & 0X03)<<1);
    2626:	a0 e4       	ldi	r26, 0x40	; 64
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e0 e4       	ldi	r30, 0x40	; 64
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	28 2f       	mov	r18, r24
    2632:	29 7f       	andi	r18, 0xF9	; 249
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	80 81       	ld	r24, Z
    263a:	88 2f       	mov	r24, r24
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	83 70       	andi	r24, 0x03	; 3
    2640:	90 70       	andi	r25, 0x00	; 0
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	82 2b       	or	r24, r18
    2648:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    264a:	eb 81       	ldd	r30, Y+3	; 0x03
    264c:	fc 81       	ldd	r31, Y+4	; 0x04
    264e:	83 81       	ldd	r24, Z+3	; 0x03
    2650:	94 81       	ldd	r25, Z+4	; 0x04
    2652:	a5 81       	ldd	r26, Z+5	; 0x05
    2654:	b6 81       	ldd	r27, Z+6	; 0x06
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	aa 1f       	adc	r26, r26
    265c:	bb 1f       	adc	r27, r27
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	aa 1f       	adc	r26, r26
    2664:	bb 1f       	adc	r27, r27
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	aa 1f       	adc	r26, r26
    266c:	bb 1f       	adc	r27, r27
    266e:	9c 01       	movw	r18, r24
    2670:	ad 01       	movw	r20, r26
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	92 e1       	ldi	r25, 0x12	; 18
    2676:	aa e7       	ldi	r26, 0x7A	; 122
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 14 14 	call	0x2828	; 0x2828 <__udivmodsi4>
    2682:	da 01       	movw	r26, r20
    2684:	c9 01       	movw	r24, r18
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    268c:	e0 e4       	ldi	r30, 0x40	; 64
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	89 2f       	mov	r24, r25
    2696:	99 27       	eor	r25, r25
    2698:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    269a:	e9 e2       	ldi	r30, 0x29	; 41
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	80 83       	st	Z, r24
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26bc:	eb e2       	ldi	r30, 0x2B	; 43
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	80 72       	andi	r24, 0x20	; 32
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	b9 f3       	breq	.-18     	; 0x26bc <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if(data & 0x0100)
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	80 70       	andi	r24, 0x00	; 0
    26d6:	91 70       	andi	r25, 0x01	; 1
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	41 f0       	breq	.+16     	; 0x26ec <UART_sendByte+0x3c>
	{
		SET_BIT(UCSRB,TXB8);
    26dc:	aa e2       	ldi	r26, 0x2A	; 42
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ea e2       	ldi	r30, 0x2A	; 42
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	81 60       	ori	r24, 0x01	; 1
    26e8:	8c 93       	st	X, r24
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <UART_sendByte+0x4a>
	}
	else
	{
		CLEAR_BIT(UCSRB,TXB8);
    26ec:	aa e2       	ldi	r26, 0x2A	; 42
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ea e2       	ldi	r30, 0x2A	; 42
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8e 7f       	andi	r24, 0xFE	; 254
    26f8:	8c 93       	st	X, r24

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26fa:	ec e2       	ldi	r30, 0x2C	; 44
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2712:	eb e2       	ldi	r30, 0x2B	; 43
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	88 23       	and	r24, r24
    271a:	dc f7       	brge	.-10     	; 0x2712 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    271c:	ec e2       	ldi	r30, 0x2C	; 44
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <UART_sendString+0x6>
    272e:	0f 92       	push	r0
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	9b 83       	std	Y+3, r25	; 0x03
    2736:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2738:	19 82       	std	Y+1, r1	; 0x01
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	fc 01       	movw	r30, r24
    2748:	e2 0f       	add	r30, r18
    274a:	f3 1f       	adc	r31, r19
    274c:	80 81       	ld	r24, Z
    274e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <UART_sendByte>
		i++;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	8f 5f       	subi	r24, 0xFF	; 255
    2756:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	39 f7       	brne	.-50     	; 0x273c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	00 d0       	rcall	.+0      	; 0x2784 <UART_receiveString+0xa>
    2784:	0f 92       	push	r0
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	9b 83       	std	Y+3, r25	; 0x03
    278c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    278e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	8c 01       	movw	r16, r24
    279c:	02 0f       	add	r16, r18
    279e:	13 1f       	adc	r17, r19
    27a0:	0e 94 85 13 	call	0x270a	; 0x270a <UART_recieveByte>
    27a4:	f8 01       	movw	r30, r16
    27a6:	80 83       	st	Z, r24
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ba:	8c 01       	movw	r16, r24
    27bc:	02 0f       	add	r16, r18
    27be:	13 1f       	adc	r17, r19
    27c0:	0e 94 85 13 	call	0x270a	; 0x270a <UART_recieveByte>
    27c4:	f8 01       	movw	r30, r16
    27c6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	fc 01       	movw	r30, r24
    27d4:	e2 0f       	add	r30, r18
    27d6:	f3 1f       	adc	r31, r19
    27d8:	80 81       	ld	r24, Z
    27da:	83 32       	cpi	r24, 0x23	; 35
    27dc:	31 f7       	brne	.-52     	; 0x27aa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	fc 01       	movw	r30, r24
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	10 82       	st	Z, r1
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <__udivmodhi4>:
    2800:	aa 1b       	sub	r26, r26
    2802:	bb 1b       	sub	r27, r27
    2804:	51 e1       	ldi	r21, 0x11	; 17
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <__udivmodhi4_ep>

00002808 <__udivmodhi4_loop>:
    2808:	aa 1f       	adc	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	a6 17       	cp	r26, r22
    280e:	b7 07       	cpc	r27, r23
    2810:	10 f0       	brcs	.+4      	; 0x2816 <__udivmodhi4_ep>
    2812:	a6 1b       	sub	r26, r22
    2814:	b7 0b       	sbc	r27, r23

00002816 <__udivmodhi4_ep>:
    2816:	88 1f       	adc	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	5a 95       	dec	r21
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__udivmodhi4_loop>
    281e:	80 95       	com	r24
    2820:	90 95       	com	r25
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	08 95       	ret

00002828 <__udivmodsi4>:
    2828:	a1 e2       	ldi	r26, 0x21	; 33
    282a:	1a 2e       	mov	r1, r26
    282c:	aa 1b       	sub	r26, r26
    282e:	bb 1b       	sub	r27, r27
    2830:	fd 01       	movw	r30, r26
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__udivmodsi4_ep>

00002834 <__udivmodsi4_loop>:
    2834:	aa 1f       	adc	r26, r26
    2836:	bb 1f       	adc	r27, r27
    2838:	ee 1f       	adc	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	a2 17       	cp	r26, r18
    283e:	b3 07       	cpc	r27, r19
    2840:	e4 07       	cpc	r30, r20
    2842:	f5 07       	cpc	r31, r21
    2844:	20 f0       	brcs	.+8      	; 0x284e <__udivmodsi4_ep>
    2846:	a2 1b       	sub	r26, r18
    2848:	b3 0b       	sbc	r27, r19
    284a:	e4 0b       	sbc	r30, r20
    284c:	f5 0b       	sbc	r31, r21

0000284e <__udivmodsi4_ep>:
    284e:	66 1f       	adc	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	88 1f       	adc	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	1a 94       	dec	r1
    2858:	69 f7       	brne	.-38     	; 0x2834 <__udivmodsi4_loop>
    285a:	60 95       	com	r22
    285c:	70 95       	com	r23
    285e:	80 95       	com	r24
    2860:	90 95       	com	r25
    2862:	9b 01       	movw	r18, r22
    2864:	ac 01       	movw	r20, r24
    2866:	bd 01       	movw	r22, r26
    2868:	cf 01       	movw	r24, r30
    286a:	08 95       	ret

0000286c <__prologue_saves__>:
    286c:	2f 92       	push	r2
    286e:	3f 92       	push	r3
    2870:	4f 92       	push	r4
    2872:	5f 92       	push	r5
    2874:	6f 92       	push	r6
    2876:	7f 92       	push	r7
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	ca 1b       	sub	r28, r26
    2896:	db 0b       	sbc	r29, r27
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	09 94       	ijmp

000028a4 <__epilogue_restores__>:
    28a4:	2a 88       	ldd	r2, Y+18	; 0x12
    28a6:	39 88       	ldd	r3, Y+17	; 0x11
    28a8:	48 88       	ldd	r4, Y+16	; 0x10
    28aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28b6:	b9 84       	ldd	r11, Y+9	; 0x09
    28b8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ba:	df 80       	ldd	r13, Y+7	; 0x07
    28bc:	ee 80       	ldd	r14, Y+6	; 0x06
    28be:	fd 80       	ldd	r15, Y+5	; 0x05
    28c0:	0c 81       	ldd	r16, Y+4	; 0x04
    28c2:	1b 81       	ldd	r17, Y+3	; 0x03
    28c4:	aa 81       	ldd	r26, Y+2	; 0x02
    28c6:	b9 81       	ldd	r27, Y+1	; 0x01
    28c8:	ce 0f       	add	r28, r30
    28ca:	d1 1d       	adc	r29, r1
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	ed 01       	movw	r28, r26
    28d8:	08 95       	ret

000028da <_exit>:
    28da:	f8 94       	cli

000028dc <__stop_program>:
    28dc:	ff cf       	rjmp	.-2      	; 0x28dc <__stop_program>
